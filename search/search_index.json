{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to DD2414 Engineering project in Robotics, Perception and Learning Here you will find all the information related to the first iteration of DD2414. The main objective of this course was to design and build a serviceable research drone platform tailored towards indoor navigation. Heavy boy Frequently used links PX4 Official Site Pixhawk 4 Pinout Technical Data Sheet PX4 Flight Analysis Tool QGround Control Teraranger Evo Mini User Manual Intel RealSense ROS Documentation","title":"Home"},{"location":"#welcome-to-dd2414-engineering-project-in-robotics-perception-and-learning","text":"Here you will find all the information related to the first iteration of DD2414. The main objective of this course was to design and build a serviceable research drone platform tailored towards indoor navigation. Heavy boy","title":"Welcome to DD2414 Engineering project in Robotics, Perception and Learning"},{"location":"#frequently-used-links","text":"PX4 Official Site Pixhawk 4 Pinout Technical Data Sheet PX4 Flight Analysis Tool QGround Control Teraranger Evo Mini User Manual Intel RealSense ROS Documentation","title":"Frequently used links"},{"location":"about/","text":"DD2414 Engineering project in Robotics, Perception and Learning Autumn 2020 Students: Luis Alejandro Sarmiento Gonzalez lasg@kth.se | alejandro.sar.gon@gmail.com Kyle Coble coble@kth.se | kwc57@cornell.edu Course responsible & supervisors: Patric Jensfelt Ludvig Ericson Daniel Duberg Goal: Design and build a serviceable research drone platform tailored towards indoor navigation. Syllabus Plan, design, source, integrate, and implement a robotic solution in the form of a serviceable research drone platform tailored towards indoor navigation. A. Mechanical design, sourcing, and construction of drone platform. B. Electrical design, sourcing, and integration of all components. C. Software integration of low level firmware (PX4) and ROS. Documentation of project A. Project planning and management through task tracking with agile development. B. Motivation of design choices. C. Documentation of the final platform in the form of a comprehensive usage guide. Work in collaboration with other group members and supervisors (PhD students and Professors). Primary ILO As a group, choose a course of approach and define, follow and follow up a plan for carrying out a larger project task in a given resource budget. Systematically design, implement, test and demonstrate a prototype system that meets given specifications and design goals. Present orally and in writing (in English), a description and defense of a technical solution to a problem in robotics, perception and learning. Be able to participate professionally in project work in activities in robotics, perception and learning. Secondary ILO Implement and integrate a number of important tools and technologies used in robotics. Be able to assess the value of, and to a suitable extent utilize, existing solutions as a part of a robotics project. Use adequate engineering tools and methods and acquire new knowledge and skill when needed.","title":"About"},{"location":"about/#autumn-2020","text":"Students: Luis Alejandro Sarmiento Gonzalez lasg@kth.se | alejandro.sar.gon@gmail.com Kyle Coble coble@kth.se | kwc57@cornell.edu Course responsible & supervisors: Patric Jensfelt Ludvig Ericson Daniel Duberg Goal: Design and build a serviceable research drone platform tailored towards indoor navigation.","title":"Autumn 2020"},{"location":"about/#syllabus","text":"Plan, design, source, integrate, and implement a robotic solution in the form of a serviceable research drone platform tailored towards indoor navigation. A. Mechanical design, sourcing, and construction of drone platform. B. Electrical design, sourcing, and integration of all components. C. Software integration of low level firmware (PX4) and ROS. Documentation of project A. Project planning and management through task tracking with agile development. B. Motivation of design choices. C. Documentation of the final platform in the form of a comprehensive usage guide. Work in collaboration with other group members and supervisors (PhD students and Professors).","title":"Syllabus"},{"location":"about/#primary-ilo","text":"As a group, choose a course of approach and define, follow and follow up a plan for carrying out a larger project task in a given resource budget. Systematically design, implement, test and demonstrate a prototype system that meets given specifications and design goals. Present orally and in writing (in English), a description and defense of a technical solution to a problem in robotics, perception and learning. Be able to participate professionally in project work in activities in robotics, perception and learning.","title":"Primary ILO"},{"location":"about/#secondary-ilo","text":"Implement and integrate a number of important tools and technologies used in robotics. Be able to assess the value of, and to a suitable extent utilize, existing solutions as a part of a robotics project. Use adequate engineering tools and methods and acquire new knowledge and skill when needed.","title":"Secondary ILO"},{"location":"future_work/","text":"Future Work As this project was completed over a limited time frame, this design should be considered as the first iteration for the new KTH RPL CAS-UAV drone platform. As such, there are a few potential areas for improvement that should be considered as priorities during the second iteration. These include: TeraRanger I2C booting Z axis drift with local positioning Flying with USB TeraRanger I2C booting The TerarRanger Evo Mini (our choice of distance sensor) has an issue where it inconsistently fails to be recognized by the PX4 code when the Pixhawk boots. This may be a low level I2C driver issue. A work around is to reboot the Pixhawk until the distance sensor is recognized, but this is not a feasible long term solution. This issue may be resolved in future PX4 releases, as it is not an issue for all TeraRanger sensors. Z axis drift with local positioning When flying with the distance sensor as the primary source of height data used by the EKF, EKF2_HGT_MODE set to 2 , the EKF often switches to barometer for altitude readings. This causes the z-axis estimate of the position to diverge. A successful workaround of mapping the distance sensor values through the MoCap topic was discussed in MAVROS Setup - ROS Wrappers . However, this is not a feasible long term solution. This issue may be resolved in future PX4 releases, as it is a commonly discussed issue for those working with indoor flight on the PX4 forums. Flying with USB As mentioned in MAVROS Setup - FTDI vs USB , we chose to \"fly with USB\" rather than with an FTDI cable. This was not a design choice, but rather was because of issues we were facing with mavlink / mavros message rates when using the FTDI cable. Properly setting up the FTDI cable and flying with it rather than with USB is the recommended configuration in the PX4 documentation. See Companion Computer for Pixhawk Series for further details.","title":"Future Work"},{"location":"future_work/#future-work","text":"As this project was completed over a limited time frame, this design should be considered as the first iteration for the new KTH RPL CAS-UAV drone platform. As such, there are a few potential areas for improvement that should be considered as priorities during the second iteration. These include: TeraRanger I2C booting Z axis drift with local positioning Flying with USB","title":"Future Work"},{"location":"future_work/#teraranger-i2c-booting","text":"The TerarRanger Evo Mini (our choice of distance sensor) has an issue where it inconsistently fails to be recognized by the PX4 code when the Pixhawk boots. This may be a low level I2C driver issue. A work around is to reboot the Pixhawk until the distance sensor is recognized, but this is not a feasible long term solution. This issue may be resolved in future PX4 releases, as it is not an issue for all TeraRanger sensors.","title":"TeraRanger I2C booting"},{"location":"future_work/#z-axis-drift-with-local-positioning","text":"When flying with the distance sensor as the primary source of height data used by the EKF, EKF2_HGT_MODE set to 2 , the EKF often switches to barometer for altitude readings. This causes the z-axis estimate of the position to diverge. A successful workaround of mapping the distance sensor values through the MoCap topic was discussed in MAVROS Setup - ROS Wrappers . However, this is not a feasible long term solution. This issue may be resolved in future PX4 releases, as it is a commonly discussed issue for those working with indoor flight on the PX4 forums.","title":"Z axis drift with local positioning"},{"location":"future_work/#flying-with-usb","text":"As mentioned in MAVROS Setup - FTDI vs USB , we chose to \"fly with USB\" rather than with an FTDI cable. This was not a design choice, but rather was because of issues we were facing with mavlink / mavros message rates when using the FTDI cable. Properly setting up the FTDI cable and flying with it rather than with USB is the recommended configuration in the PX4 documentation. See Companion Computer for Pixhawk Series for further details.","title":"Flying with USB"},{"location":"tests/","text":"Weekly Update Presentations and Flight Tests In this section you will find a link to all the available presentations during this project course and all the flight tests performed. Presentations Week 50 Week 49 Week 48 Week 47 Week 46 Week 45 Flight tests All the flight tests follow the same documentation guideline, a video of the flight, a rosbag containing useful topics (MAVROS and tf), PX4 flight logs and flight notes containing observations and brief analysis. \u251c\u2500\u2500 ###_<flight test name> \u251c\u2500\u2500 flight.MOV \u251c\u2500\u2500 flight_log.ulg \u251c\u2500\u2500 rosbag.bag \u2514\u2500\u2500 flight_notes.txt Failed Initial Flights 01_flight_test Failed flight - first flight attempt 02_flight_test Failed flight - caught in net 03_flight_test Failed flight - caught in net (again) 04_flight_test Failed flight - started in position hold mode 05_flight_test Failed flight - caught in far net 06_flight_test Failed flight - small jump 07_flight_test Failed flight - low battery auto-land early on 08_flight_test Failed flight - corner crash 09_flight_test Failed flight - flew forward and crashed 10_flight_test Failed flight - BIG CRASH Successful Flights 11_flight_test First successful flight 12_flight_test Hover test - short 13_flight_test Hover test - 4,000 mAh battery 14_flight_test Hover test - 4,000 mAh with lidar camera 15_flight_test Failed flights - First attempts without MoCap 16_flight_test Flight without MoCap system 17_flight_test Compare optical flow + distance sensor vs. MoCap 18_flight_test Mapping distance sensor through MoCap topic 19_flight_test Spinning demo (using MoCap) 20_flight_test Hover test - 4,000 mAh with 3 RealSense cameras 21_flight_test Hover test - 8,000 mAh with 3 RealSense cameras 22_flight_test Motor vibration damper tests 23_flight_test PID Tuning 24_flight_test Flight out of the cage 25_flight_test Hover test - 8,500 mAh with 3 RealSense cameras As a side test, we wanted to know how strong the 3D printed landing gear was (within reason). Hence we did some drop test, that you can find here Drop tests","title":"Weekly Updates & Tests"},{"location":"tests/#weekly-update-presentations-and-flight-tests","text":"In this section you will find a link to all the available presentations during this project course and all the flight tests performed.","title":"Weekly Update Presentations and Flight Tests"},{"location":"tests/#presentations","text":"Week 50 Week 49 Week 48 Week 47 Week 46 Week 45","title":" Presentations"},{"location":"tests/#flight-tests","text":"All the flight tests follow the same documentation guideline, a video of the flight, a rosbag containing useful topics (MAVROS and tf), PX4 flight logs and flight notes containing observations and brief analysis. \u251c\u2500\u2500 ###_<flight test name> \u251c\u2500\u2500 flight.MOV \u251c\u2500\u2500 flight_log.ulg \u251c\u2500\u2500 rosbag.bag \u2514\u2500\u2500 flight_notes.txt","title":" Flight tests"},{"location":"tests/#failed-initial-flights","text":"01_flight_test Failed flight - first flight attempt 02_flight_test Failed flight - caught in net 03_flight_test Failed flight - caught in net (again) 04_flight_test Failed flight - started in position hold mode 05_flight_test Failed flight - caught in far net 06_flight_test Failed flight - small jump 07_flight_test Failed flight - low battery auto-land early on 08_flight_test Failed flight - corner crash 09_flight_test Failed flight - flew forward and crashed 10_flight_test Failed flight - BIG CRASH","title":"Failed Initial Flights"},{"location":"tests/#successful-flights","text":"11_flight_test First successful flight 12_flight_test Hover test - short 13_flight_test Hover test - 4,000 mAh battery 14_flight_test Hover test - 4,000 mAh with lidar camera 15_flight_test Failed flights - First attempts without MoCap 16_flight_test Flight without MoCap system 17_flight_test Compare optical flow + distance sensor vs. MoCap 18_flight_test Mapping distance sensor through MoCap topic 19_flight_test Spinning demo (using MoCap) 20_flight_test Hover test - 4,000 mAh with 3 RealSense cameras 21_flight_test Hover test - 8,000 mAh with 3 RealSense cameras 22_flight_test Motor vibration damper tests 23_flight_test PID Tuning 24_flight_test Flight out of the cage 25_flight_test Hover test - 8,500 mAh with 3 RealSense cameras As a side test, we wanted to know how strong the 3D printed landing gear was (within reason). Hence we did some drop test, that you can find here Drop tests","title":"Successful Flights"},{"location":"assembly/frame/","text":"Frame Assembly The frame used in this design is a Q380 Multirotor Frame with a Power Distribution Board (PDB) integrated into the frame body. NOTE: It is recommended to follow some of the power supply installation instructions prior to assembling the frame as it will be easier to solder necessary components to the integrated PDB before the frame is assembled. PDB Installation. The Q380 Multirotor PDB embedded into the bottom plate requires the following steps before being assembled into the frame. You need a Power Module , this will be soldered into the PDB in the spot marked as follows: Note that we also need to solder a filtering capacitor into the PDB at the same spot (red circle). The XT60 battery connector on one end of the Power module is left to be able to exchange the type of connector (XT60 to XT60 or XT60 to XT90) that will be placed in the 3D printed holder, as well this was also intended to be connected to an inline voltage alarm ( to replace the alarm that connects directly to each cell). The result of how this looks after mounting is shown next. Standard Frame Assembly Assembling the standard frame is fairly straightforward, by following the instructions in the Q380 Multirotor Frame Kit . Only the parts included in the frame kit are required. This assembly is sufficient for smaller battery form factors, i.e. 4000 mAh 4S LiPo batteries. However, the optimal design includes a 8500 mAh LiPo battery that requires 3D printed Large Battery Adapters to clear enough space for the large battery form factor. Large Battery Frame Assembly Required Parts 1x Q380 Multirotor Frame Kit (w/ accompanying screws) 4x Large Battery Adapter 8x M2.5 x 12 phillips screws (slightly shorter OK) 8x M3 x 10 torx scews 8x M3 Nuts Procedure 3D Printing Assembling the landing gear first requires printing all necessary components, detailed in the table below: Component Name Quantity Recommended Orientation Large Battery Adapter 4 Top side down CAD files can be found at Large Battery Adapter . The recommended orientations are selected primarily for ease of removing the breakaway support material. In this case, it is so the nut slot doesn't fill with support material. For our implementation, the parts were printed with PLA material using the standard print settings (with breakaway support under bridges) of the Makerbot Replicator+ 3D printer. Printed component quality/durability could possibly be improved by the use of ABS material or by modifying print settings. Recommended setting changes for these parts include: 60% infill Hexagonal Fill Pattern Assembly Connect the drone frame arms to the lower plate, per instructions in the kit. Have the side with the centered power terminals on the bottom. Attach the bottom of 3D printed adapters to top of Q380 arms with M2.5x12 screws. Have the screw openings in the printed components facing out. Stick small screwdriver through top hole to access bottom screw. Flip entire top (with arms already attached) upside down Slip M3 nuts into slots It will probably be easier to complete this and the next step together, one screw at a time. Attach Q380 top plate to adapters with M3 x 10 torx scews. Consider mounting the NUC mount bottom component to the Q380 top plate before attaching the top plate to the rest of the frame. It will make the Assembly - NUC Bottom Mount step easier. -- Weight added from larger battery adapters Total: 26 g (all four) Per arm: 6.5 g/set Individual components: Printed Adapter: ~3.5 g/st M2.5 x 12: ~0.5 g/st M3 x 10: ~0.5 g/st M3 nut: ~0.25 g/st","title":"Frame"},{"location":"assembly/frame/#frame-assembly","text":"The frame used in this design is a Q380 Multirotor Frame with a Power Distribution Board (PDB) integrated into the frame body. NOTE: It is recommended to follow some of the power supply installation instructions prior to assembling the frame as it will be easier to solder necessary components to the integrated PDB before the frame is assembled.","title":"Frame Assembly"},{"location":"assembly/frame/#pdb-installation","text":"The Q380 Multirotor PDB embedded into the bottom plate requires the following steps before being assembled into the frame. You need a Power Module , this will be soldered into the PDB in the spot marked as follows: Note that we also need to solder a filtering capacitor into the PDB at the same spot (red circle). The XT60 battery connector on one end of the Power module is left to be able to exchange the type of connector (XT60 to XT60 or XT60 to XT90) that will be placed in the 3D printed holder, as well this was also intended to be connected to an inline voltage alarm ( to replace the alarm that connects directly to each cell). The result of how this looks after mounting is shown next.","title":"PDB Installation."},{"location":"assembly/frame/#standard-frame-assembly","text":"Assembling the standard frame is fairly straightforward, by following the instructions in the Q380 Multirotor Frame Kit . Only the parts included in the frame kit are required. This assembly is sufficient for smaller battery form factors, i.e. 4000 mAh 4S LiPo batteries. However, the optimal design includes a 8500 mAh LiPo battery that requires 3D printed Large Battery Adapters to clear enough space for the large battery form factor.","title":"Standard Frame Assembly"},{"location":"assembly/frame/#large-battery-frame-assembly","text":"","title":"Large Battery Frame Assembly"},{"location":"assembly/frame/#required-parts","text":"1x Q380 Multirotor Frame Kit (w/ accompanying screws) 4x Large Battery Adapter 8x M2.5 x 12 phillips screws (slightly shorter OK) 8x M3 x 10 torx scews 8x M3 Nuts","title":"Required Parts"},{"location":"assembly/frame/#procedure","text":"","title":"Procedure"},{"location":"assembly/frame/#3d-printing","text":"Assembling the landing gear first requires printing all necessary components, detailed in the table below: Component Name Quantity Recommended Orientation Large Battery Adapter 4 Top side down CAD files can be found at Large Battery Adapter . The recommended orientations are selected primarily for ease of removing the breakaway support material. In this case, it is so the nut slot doesn't fill with support material. For our implementation, the parts were printed with PLA material using the standard print settings (with breakaway support under bridges) of the Makerbot Replicator+ 3D printer. Printed component quality/durability could possibly be improved by the use of ABS material or by modifying print settings. Recommended setting changes for these parts include: 60% infill Hexagonal Fill Pattern","title":"3D Printing"},{"location":"assembly/frame/#assembly","text":"Connect the drone frame arms to the lower plate, per instructions in the kit. Have the side with the centered power terminals on the bottom. Attach the bottom of 3D printed adapters to top of Q380 arms with M2.5x12 screws. Have the screw openings in the printed components facing out. Stick small screwdriver through top hole to access bottom screw. Flip entire top (with arms already attached) upside down Slip M3 nuts into slots It will probably be easier to complete this and the next step together, one screw at a time. Attach Q380 top plate to adapters with M3 x 10 torx scews. Consider mounting the NUC mount bottom component to the Q380 top plate before attaching the top plate to the rest of the frame. It will make the Assembly - NUC Bottom Mount step easier. -- Weight added from larger battery adapters Total: 26 g (all four) Per arm: 6.5 g/set Individual components: Printed Adapter: ~3.5 g/st M2.5 x 12: ~0.5 g/st M3 x 10: ~0.5 g/st M3 nut: ~0.25 g/st","title":"Assembly"},{"location":"assembly/landing_gear/","text":"Landing Gear Assembly Required Parts 2x sets of 3D printed standard leg components 2x sets of 3D printed D435i mount leg components 12x NdFeB magnets of 8x3 mm (1.3 kg tensile force) 4x Large zip ties (e.g. 200mm x 4.6mm) Procedure 3D Printing Assembling the landing gear first requires printing all necessary components, detailed in the table below: Component Name Quantity Recommended Orientation Main Leg (No camera mount) 2 Arm connection down Main Leg (With camera mount) 2 Arm connection down Lower Leg 4 Magnetic slots up Magnetic Insert 4 Magnetic slots up Magnetic Insert Pins 8 Flat head down Rounded Foot 4 Rounded foot down CAD files can be found at Landing Gear Assembly CAD . The recommended orientations are selected primarily for ease of removing the breakaway support material. For our implementation, the parts were printed with PLA material using the standard print settings (with breakaway support under bridges) of the Makerbot Replicator+ 3D printer. Printed component quality/durability could possibly be improved by the use of ABS material or by modifying print settings. Magnet Insertion The magnets in the magnetic insert and the lower leg are used as shocks. By facing the magnets so they repel, the magnets will absorb energy and dampen the impact during hard landings / drops and protect the drone components (within reason). It is important that the magnet pairs are oriented such that they repel. For this reason, it is recommended that all magnets are inserted in the SAME DIRECTION for all lower legs and magnetic inserts, so that when the lower leg and magnetic insert are pointed towards each other, they repel. This also will make it so that the lower parts are all interchangeable so you won't have to keep track of which lower leg corresponds to which magnetic insert. The magnets should fit snugly into the magnet grooves and since the magnets are repelling, they should not be pulled out of their grooves. This means no glue is required when placing the magnets into their grooves. You could place a small drop of super glue into the groove before placing the magnets to ensure they hold. Just be sure that the magnet will be correctly oriented before using any glue. Mounting to Q380 Arm The two legs with the small platforms for the RealSense D435i stereo cameras should face towards the front of the drone, and the two without should be in the back of the drone. To install them, find the right spot on the Q380 arm (as on the images below) and carefully push the clip of the main leg onto the arm of the Q380 quadrotor frame. Note that the longer side of the V in the top of the clip points goes towards the center of the drone frame and that the pyramidal supports of the clip slide around the vertical part of the arched supports of the Q380 arm. See the images below for an example of where/how the landing gear clips to the Q380 arms. Note that this is an example clip, not the actual clip on the main leg of the landing gear. Use one of the large zip ties to secure the landing gear to the arm. The zip tie is fed through the slot under the clip portion of the main leg, and slides over the grooves along the top of the clip, as seen below: Final Assembly Slide the magnetic insert into the opening in the bottom of the main leg. Ensure the magnets are facing out, such that you can see the magnet if you look into the bottom of the leg. Push the lower leg into the opening of the main leg, oriented so the 3 magnets in the lower leg line up with the 3 magnets in the magnetic insert. You should feel the magnets of the lower leg pushing the magnetic insert all the way back into the main leg. With the lower leg pushed into the main leg, insert the two magnetic insert pins into the side of the main leg such that it goes through the slot in the lower leg. The direction the pins are inserted doesn't matter. If the sliding action of the lower leg in the main leg feels stiff / stuck, then you should exercise the range of motion by hand to wear the parts until compression and expansion (repulsion) is smooth. If the sliding action feels like it may be getting stuck specifically on the pins, it is easy to remove the pins and sand/shave them down. Insert the shaft of the rounded foot into the round hole in the bottom of the lower leg.","title":"Landing Gear"},{"location":"assembly/landing_gear/#landing-gear-assembly","text":"","title":"Landing Gear Assembly"},{"location":"assembly/landing_gear/#required-parts","text":"2x sets of 3D printed standard leg components 2x sets of 3D printed D435i mount leg components 12x NdFeB magnets of 8x3 mm (1.3 kg tensile force) 4x Large zip ties (e.g. 200mm x 4.6mm)","title":"Required Parts"},{"location":"assembly/landing_gear/#procedure","text":"","title":"Procedure"},{"location":"assembly/landing_gear/#3d-printing","text":"Assembling the landing gear first requires printing all necessary components, detailed in the table below: Component Name Quantity Recommended Orientation Main Leg (No camera mount) 2 Arm connection down Main Leg (With camera mount) 2 Arm connection down Lower Leg 4 Magnetic slots up Magnetic Insert 4 Magnetic slots up Magnetic Insert Pins 8 Flat head down Rounded Foot 4 Rounded foot down CAD files can be found at Landing Gear Assembly CAD . The recommended orientations are selected primarily for ease of removing the breakaway support material. For our implementation, the parts were printed with PLA material using the standard print settings (with breakaway support under bridges) of the Makerbot Replicator+ 3D printer. Printed component quality/durability could possibly be improved by the use of ABS material or by modifying print settings.","title":"3D Printing"},{"location":"assembly/landing_gear/#magnet-insertion","text":"The magnets in the magnetic insert and the lower leg are used as shocks. By facing the magnets so they repel, the magnets will absorb energy and dampen the impact during hard landings / drops and protect the drone components (within reason). It is important that the magnet pairs are oriented such that they repel. For this reason, it is recommended that all magnets are inserted in the SAME DIRECTION for all lower legs and magnetic inserts, so that when the lower leg and magnetic insert are pointed towards each other, they repel. This also will make it so that the lower parts are all interchangeable so you won't have to keep track of which lower leg corresponds to which magnetic insert. The magnets should fit snugly into the magnet grooves and since the magnets are repelling, they should not be pulled out of their grooves. This means no glue is required when placing the magnets into their grooves. You could place a small drop of super glue into the groove before placing the magnets to ensure they hold. Just be sure that the magnet will be correctly oriented before using any glue.","title":"Magnet Insertion"},{"location":"assembly/landing_gear/#mounting-to-q380-arm","text":"The two legs with the small platforms for the RealSense D435i stereo cameras should face towards the front of the drone, and the two without should be in the back of the drone. To install them, find the right spot on the Q380 arm (as on the images below) and carefully push the clip of the main leg onto the arm of the Q380 quadrotor frame. Note that the longer side of the V in the top of the clip points goes towards the center of the drone frame and that the pyramidal supports of the clip slide around the vertical part of the arched supports of the Q380 arm. See the images below for an example of where/how the landing gear clips to the Q380 arms. Note that this is an example clip, not the actual clip on the main leg of the landing gear. Use one of the large zip ties to secure the landing gear to the arm. The zip tie is fed through the slot under the clip portion of the main leg, and slides over the grooves along the top of the clip, as seen below:","title":"Mounting to Q380 Arm"},{"location":"assembly/landing_gear/#final-assembly","text":"Slide the magnetic insert into the opening in the bottom of the main leg. Ensure the magnets are facing out, such that you can see the magnet if you look into the bottom of the leg. Push the lower leg into the opening of the main leg, oriented so the 3 magnets in the lower leg line up with the 3 magnets in the magnetic insert. You should feel the magnets of the lower leg pushing the magnetic insert all the way back into the main leg. With the lower leg pushed into the main leg, insert the two magnetic insert pins into the side of the main leg such that it goes through the slot in the lower leg. The direction the pins are inserted doesn't matter. If the sliding action of the lower leg in the main leg feels stiff / stuck, then you should exercise the range of motion by hand to wear the parts until compression and expansion (repulsion) is smooth. If the sliding action feels like it may be getting stuck specifically on the pins, it is easy to remove the pins and sand/shave them down. Insert the shaft of the rounded foot into the round hole in the bottom of the lower leg.","title":"Final Assembly"},{"location":"assembly/peripherals/","text":"Peripherals Assembly The \"peripherals\" encompass the components that go beyond the scope of low level sensors and components required by the Pixhawk / PX4 flight stack for flight. This includes: Companion computers for additional onboard processing Lidar sensors used for SLAM Cameras used for Computer Vision and/or SLAM Required Parts 1x Intel\u00ae NUC 8 Pro Board - NUC8v7PNB 1x DC-DC 10-32V To 12-35V 150W Boost Converter 1x RealSense L515 Lidar Camera 2x RealSense D435i Stereo Cameras -- 2x preassembled landing gear assembly (w/ camera mount) 1x 3D printed NUC Mount Assembly 1x 3D printed L515 Camera mount 1x 3D printed Boost Converter Mount -- 3x 0.25\" Camera Screws 4x M3 x 12mm screws (w/ nuts) 3x M3 x 10mm screws (w/ washers & nuts) 4x M3 x 32mm screws (w/ nuts) 1x Cable with barrel jack (~5 cm loose wire) 2x wires ~ 10 cm long 4x 2mm Bullet (Banana) connectors (male) 1x USB-C to USB-C Cable 2x USB-C to USB Cable Procedure Before starting, please follow instructions for Landing Gear Assembly . The D435i stereo cameras are mounted onto two of the landing gear legs [ Main Leg (With camera mount) ], so these should be attached to the drone frame prior to connecting the peripherals. 3D Printing Assembling the landing gear first requires printing all necessary components, detailed in the table below: Component Name Quantity Recommended Orientation NUC Mount Top 1 Flat side down NUC Mount Bottom 1 Flat side down Boost Converter Mount 1 Flat side down L515 Camera Mount 1 Camera face down CAD files can be found at NUC Mount Assembly , Boost Converter Mount , and L515 Camera Mount . The recommended orientations are selected primarily for ease of removing the breakaway support material. For our implementation, the parts were printed with PLA material using the standard print settings (with breakaway support under bridges) of the Makerbot Replicator+ 3D printer. Printed component quality/durability could possibly be improved by the use of ABS material or by modifying print settings. Boost Converter The boost converter sits on top of the NUC. There are multiple mounting point options on the NUC for the boost converter mount. This flexibility is so the weight distribution can be changed AND to offer a spot for mounting a Nvidia TX2 on top of the NUC for additional computing / image processing capabilities. See TX2 Note below. It is strongly recommended (if not mandatory) to mount the boost converter to the furthest back mounting point (as seen above) as it is helpful in offsetting the weight imbalance caused by all three RealSense cameras being mounted so far forwards. The only reason to choose a different mounting point is if you end up incorporating a TX2 in your assembly, in which case the TX2 should be at the back and the boost converter would be at the front. Steps Set the boost converter in the mount with the wire ports towards the open side Note that the open side of the NUC mount sits on the drone's left hand side. See NUC Assembly below. Line up the boost converter with the furthest back set of mounting holes, such that the wire ports face towards the open (left) side of the NUC mount. Insert a nut into each of the 4 corresponding nut slots in the underside of the NUC mount top Use four M3 x 12mm screws to secure the boost converter from its top side, through the boost converter mount, through the NUC mount top, and secured into the nut slot on the underside of the NUC mount top. Make sure the screws are not hitting the top of the NUC when the mount is set on it. If they are, use shorter screws The NUC is powered by a barrel jack coming straight out of the boost converter You need ~ 5cm from the barrel jack to the loose wire ends that are fed into the boost converter. This could need to be longer if you are including a TX2, as mentioned above. It is convenient to have 2mm male bullet (banana) connectors on the loose wire ends for a better connection into all the boost converter ports (power-in from hot swap board as well) Insert the power-in cables (the two ~10 cm wires) to the correct ports and feed the wires through the NUC mount top, so they will come out at the front near the hot swap board, as seen above We found it convenient to split the wire with 2mm bullet connectors near where they are thread through the NUC mount, so it is easier to disconnect them from the hot swap board. This isn't necessary, but could be nice. You should now have the boost converter secured to the top of the NUC mount and can treat them as one component while mounting the NUC. NUC Bottom Mount Mount the NUC mount bottom to the top plate of the Q380 drone frame, with the open side of the mount pointed to the left hand side of the drone, using the M3 x 10mm screws, with a washer under the head and a nut under the Q380 top plate. This is easier done without the top plate mounted to the rest of the frame, but can be done with the top plate already mounted. The three screw locations seen below are the locations you must use. Using other screw hole locations will cause the bottom of the screw and the nut to interfere with sliding the battery into place. MoCap Marker Installation We found it convenient to use the hexagonal holes printed into th NUC mount as motion capture (MoCap) marker installation points. If you would like to do this as well, install these markers before securing the NUC to the bottom and top NUC mount components. When mounting the marker balls, consider: The \"rigid body\" the markers form should not be symmetric in any way. This could cause orientation ambiguity in the MoCap's estimate of the drone's 6 DOF position. The markers should be visible from as many directions at a time as possible It is recommended to use between 4 and 8 markers on a drone of this size Each \"rigid body\" should have a unique marker layout so the system doesn't confuse which drone / object it is detecting See OptiTrack - Rigid Body Marker Placement for an overview on marker placement. If you see the MoCap's position or (more likely) orientation estimate flickering between two poses, then there is likely some ambiguity/symmetry issue in some of your marker placements. Securing the NUC Optional: Secure the NUC's ground wire tabs to the bottom of the fan so they will fit into the long groove cut into the NUC mount bottom. This can be done with a small piece of tape. Set the NUC on top of the bottom mount, with the fan exhaust pointed towards the open side of the mount and the ground wire tabs in their groove. There are channels in the NUC mount where the ground wires can be run. Set the NUC top mount (with boost converter attached) on top of the NUC, lining up the open side of the mount on the top and bottom components. One corner at a time, push a nut into the nut slot in the underside of the NUC mount bottom and drop a M3 x 32mm screw into the corresponding hole in the NUC mount top. Tighten the screw until it grips the nut so it won't come loose, but do not crank it tight yet. Once all four corners are secured, gently tighten them a little at a time. Do not over tighten, as you could crack the 3D printed NUC mount. RealSense Cameras L515 Lidar Camera The L515 camera slips into the 3D printed mount, facing out and with the screw hole in the bottom lining up with the hole in the bottom of the mount. You should use one of the 1/4 inch camera screws to ensure the camera is held in place. The back end of the mount then slips over the part sticking out on the bottom plate, facing towards the front. This slip is a very snug fit, so be careful when installing the mount to not snap the frame or the 3D printed mount. It helps to wiggle the mount back and forth to slide it on, BUT DO NOT WIGGLE IT UP AND DOWN as it is more likely to break one of the components this way. D435i Stereo Cameras The stereo cameras sit on top of the platforms of the two landing gear legs with the platforms. These should be the two legs in the front of the drone. If they aren't, switch the legs around so the cameras will face towards the front, both at a 45 degree angle from thr L515 camera. Sit the camera on the platform and secure both of them with one of the 1/4 inch camera screws. Make sure the screw is tight and that the back of camera is parallel to the closest face of leg it is mounted on. There is a small gap, which gives the camera some play, but it should be parallel so it matches the ROS static transforms necessary for the SLAM applications these cameras will be used in. Cables All three RealSense cameras have USB-C ports for connecting to the NUC. The NUC only has one USB-C port and many standard USB ports. Choose the USB-C -> USB-C & USB-C -> USB cable connections that make the most sense (you will configure which camera corresponds to which port later) and use zip ties as necessary to hold the cables away from the propellers. TX2 Note Originally, we had intended to include a Nvidia TX2, in addition to the NUC, for additional computing / image processing capabilities. We did not end up mounting a TX2, but it should be fairly straightforward to design a mount for a TX2 on a J120 board . We have holes in the top of the NUC mount matching the footprint of the J120 board and designed an example mount similar to the boost converter mount ( TX2 Mount Prototype ), but never printed and mounted the TX2 so we cannot guarantee it will fit. As you can see below, it should fit when mounted in the same way as the boost converter mount. Also, power supply from the boost converter should be sufficient for both the NUC and the TX2 simultaneously, but this was not verified with a test.","title":"Peripherals"},{"location":"assembly/peripherals/#peripherals-assembly","text":"The \"peripherals\" encompass the components that go beyond the scope of low level sensors and components required by the Pixhawk / PX4 flight stack for flight. This includes: Companion computers for additional onboard processing Lidar sensors used for SLAM Cameras used for Computer Vision and/or SLAM","title":"Peripherals Assembly"},{"location":"assembly/peripherals/#required-parts","text":"1x Intel\u00ae NUC 8 Pro Board - NUC8v7PNB 1x DC-DC 10-32V To 12-35V 150W Boost Converter 1x RealSense L515 Lidar Camera 2x RealSense D435i Stereo Cameras -- 2x preassembled landing gear assembly (w/ camera mount) 1x 3D printed NUC Mount Assembly 1x 3D printed L515 Camera mount 1x 3D printed Boost Converter Mount -- 3x 0.25\" Camera Screws 4x M3 x 12mm screws (w/ nuts) 3x M3 x 10mm screws (w/ washers & nuts) 4x M3 x 32mm screws (w/ nuts) 1x Cable with barrel jack (~5 cm loose wire) 2x wires ~ 10 cm long 4x 2mm Bullet (Banana) connectors (male) 1x USB-C to USB-C Cable 2x USB-C to USB Cable","title":"Required Parts"},{"location":"assembly/peripherals/#procedure","text":"Before starting, please follow instructions for Landing Gear Assembly . The D435i stereo cameras are mounted onto two of the landing gear legs [ Main Leg (With camera mount) ], so these should be attached to the drone frame prior to connecting the peripherals.","title":"Procedure"},{"location":"assembly/peripherals/#3d-printing","text":"Assembling the landing gear first requires printing all necessary components, detailed in the table below: Component Name Quantity Recommended Orientation NUC Mount Top 1 Flat side down NUC Mount Bottom 1 Flat side down Boost Converter Mount 1 Flat side down L515 Camera Mount 1 Camera face down CAD files can be found at NUC Mount Assembly , Boost Converter Mount , and L515 Camera Mount . The recommended orientations are selected primarily for ease of removing the breakaway support material. For our implementation, the parts were printed with PLA material using the standard print settings (with breakaway support under bridges) of the Makerbot Replicator+ 3D printer. Printed component quality/durability could possibly be improved by the use of ABS material or by modifying print settings.","title":"3D Printing"},{"location":"assembly/peripherals/#boost-converter","text":"The boost converter sits on top of the NUC. There are multiple mounting point options on the NUC for the boost converter mount. This flexibility is so the weight distribution can be changed AND to offer a spot for mounting a Nvidia TX2 on top of the NUC for additional computing / image processing capabilities. See TX2 Note below. It is strongly recommended (if not mandatory) to mount the boost converter to the furthest back mounting point (as seen above) as it is helpful in offsetting the weight imbalance caused by all three RealSense cameras being mounted so far forwards. The only reason to choose a different mounting point is if you end up incorporating a TX2 in your assembly, in which case the TX2 should be at the back and the boost converter would be at the front.","title":"Boost Converter"},{"location":"assembly/peripherals/#steps","text":"Set the boost converter in the mount with the wire ports towards the open side Note that the open side of the NUC mount sits on the drone's left hand side. See NUC Assembly below. Line up the boost converter with the furthest back set of mounting holes, such that the wire ports face towards the open (left) side of the NUC mount. Insert a nut into each of the 4 corresponding nut slots in the underside of the NUC mount top Use four M3 x 12mm screws to secure the boost converter from its top side, through the boost converter mount, through the NUC mount top, and secured into the nut slot on the underside of the NUC mount top. Make sure the screws are not hitting the top of the NUC when the mount is set on it. If they are, use shorter screws The NUC is powered by a barrel jack coming straight out of the boost converter You need ~ 5cm from the barrel jack to the loose wire ends that are fed into the boost converter. This could need to be longer if you are including a TX2, as mentioned above. It is convenient to have 2mm male bullet (banana) connectors on the loose wire ends for a better connection into all the boost converter ports (power-in from hot swap board as well) Insert the power-in cables (the two ~10 cm wires) to the correct ports and feed the wires through the NUC mount top, so they will come out at the front near the hot swap board, as seen above We found it convenient to split the wire with 2mm bullet connectors near where they are thread through the NUC mount, so it is easier to disconnect them from the hot swap board. This isn't necessary, but could be nice. You should now have the boost converter secured to the top of the NUC mount and can treat them as one component while mounting the NUC.","title":"Steps"},{"location":"assembly/peripherals/#nuc","text":"","title":"NUC"},{"location":"assembly/peripherals/#bottom-mount","text":"Mount the NUC mount bottom to the top plate of the Q380 drone frame, with the open side of the mount pointed to the left hand side of the drone, using the M3 x 10mm screws, with a washer under the head and a nut under the Q380 top plate. This is easier done without the top plate mounted to the rest of the frame, but can be done with the top plate already mounted. The three screw locations seen below are the locations you must use. Using other screw hole locations will cause the bottom of the screw and the nut to interfere with sliding the battery into place.","title":"Bottom Mount"},{"location":"assembly/peripherals/#mocap-marker-installation","text":"We found it convenient to use the hexagonal holes printed into th NUC mount as motion capture (MoCap) marker installation points. If you would like to do this as well, install these markers before securing the NUC to the bottom and top NUC mount components. When mounting the marker balls, consider: The \"rigid body\" the markers form should not be symmetric in any way. This could cause orientation ambiguity in the MoCap's estimate of the drone's 6 DOF position. The markers should be visible from as many directions at a time as possible It is recommended to use between 4 and 8 markers on a drone of this size Each \"rigid body\" should have a unique marker layout so the system doesn't confuse which drone / object it is detecting See OptiTrack - Rigid Body Marker Placement for an overview on marker placement. If you see the MoCap's position or (more likely) orientation estimate flickering between two poses, then there is likely some ambiguity/symmetry issue in some of your marker placements.","title":"MoCap Marker Installation"},{"location":"assembly/peripherals/#securing-the-nuc","text":"Optional: Secure the NUC's ground wire tabs to the bottom of the fan so they will fit into the long groove cut into the NUC mount bottom. This can be done with a small piece of tape. Set the NUC on top of the bottom mount, with the fan exhaust pointed towards the open side of the mount and the ground wire tabs in their groove. There are channels in the NUC mount where the ground wires can be run. Set the NUC top mount (with boost converter attached) on top of the NUC, lining up the open side of the mount on the top and bottom components. One corner at a time, push a nut into the nut slot in the underside of the NUC mount bottom and drop a M3 x 32mm screw into the corresponding hole in the NUC mount top. Tighten the screw until it grips the nut so it won't come loose, but do not crank it tight yet. Once all four corners are secured, gently tighten them a little at a time. Do not over tighten, as you could crack the 3D printed NUC mount.","title":"Securing the NUC"},{"location":"assembly/peripherals/#realsense-cameras","text":"","title":"RealSense Cameras"},{"location":"assembly/peripherals/#l515-lidar-camera","text":"The L515 camera slips into the 3D printed mount, facing out and with the screw hole in the bottom lining up with the hole in the bottom of the mount. You should use one of the 1/4 inch camera screws to ensure the camera is held in place. The back end of the mount then slips over the part sticking out on the bottom plate, facing towards the front. This slip is a very snug fit, so be careful when installing the mount to not snap the frame or the 3D printed mount. It helps to wiggle the mount back and forth to slide it on, BUT DO NOT WIGGLE IT UP AND DOWN as it is more likely to break one of the components this way.","title":"L515 Lidar Camera"},{"location":"assembly/peripherals/#d435i-stereo-cameras","text":"The stereo cameras sit on top of the platforms of the two landing gear legs with the platforms. These should be the two legs in the front of the drone. If they aren't, switch the legs around so the cameras will face towards the front, both at a 45 degree angle from thr L515 camera. Sit the camera on the platform and secure both of them with one of the 1/4 inch camera screws. Make sure the screw is tight and that the back of camera is parallel to the closest face of leg it is mounted on. There is a small gap, which gives the camera some play, but it should be parallel so it matches the ROS static transforms necessary for the SLAM applications these cameras will be used in.","title":"D435i Stereo Cameras"},{"location":"assembly/peripherals/#cables","text":"All three RealSense cameras have USB-C ports for connecting to the NUC. The NUC only has one USB-C port and many standard USB ports. Choose the USB-C -> USB-C & USB-C -> USB cable connections that make the most sense (you will configure which camera corresponds to which port later) and use zip ties as necessary to hold the cables away from the propellers.","title":"Cables"},{"location":"assembly/peripherals/#tx2-note","text":"Originally, we had intended to include a Nvidia TX2, in addition to the NUC, for additional computing / image processing capabilities. We did not end up mounting a TX2, but it should be fairly straightforward to design a mount for a TX2 on a J120 board . We have holes in the top of the NUC mount matching the footprint of the J120 board and designed an example mount similar to the boost converter mount ( TX2 Mount Prototype ), but never printed and mounted the TX2 so we cannot guarantee it will fit. As you can see below, it should fit when mounted in the same way as the boost converter mount. Also, power supply from the boost converter should be sufficient for both the NUC and the TX2 simultaneously, but this was not verified with a test.","title":"TX2 Note"},{"location":"assembly/propulsion/","text":"Propulsion Assembly Required Parts 4x 30A, 2S-4S ESC's 4x SunnySky X2216 V3 - 1250kV - short shaft motors 4x Propeller guards (8045 size) 4x 8045 Propellers 2x CW & 2x CCW 1x 5mm (M5) prop adapters kit 2x CW & 2x CCW 16x M3 x 14mm screws 12x 3.5 mm bullet connectors (female) 8x small zip ties (e.g. 100mm x 2.5mm) Procedure When installing the propulsion system it is important to keep in mind that the motors will spin in different directions, clockwise (CW) or counter-clockwise (CCW), based on the motor location. This image, from the PX4 documentation, shows the motor id and the propeller spin direction for a Quad X multi-rotor copter like ours. ESC The SunnySky motors we are using come equipped with 3.5 mm bullet connectors (male). You will need to solder the female bullet connectors onto the 3 loose wires coming out of the ESC and insulate them with some thermal shrink fit. Add thermal shrink fit over the ESC's for insulation / protection. Note that we used the clear thermal fit on the CW ESC's and the black on the CCW ESC's for easier identification, but they are identical electrically. Solder the loose ESC power-in cables to the open terminals on the underside of the Q380 drone frame bottom plate, where the arm connects to the bottom plate. Red -> Positive | Black -> Negative In the Sensor Plate Assembly instructions, you will add an extension to the PWM connection cable, so you can leave this cable loose for now. Once that extension is prepared, the ESC's PWM cable plugs into the extension where the arm connects to the bottom plate. The connections will be made based on Quadrotor x Airframe Reference . Motor Mounting Install the CW & CCW propeller adapters (2 of each) onto the motors using the M2 screws that come in the kit. The supplied adapters with the SunnySky motors are all one direction, so you would experience self-loosening on two of the motors if you didn't use the purchased adapter kit. Select motor locations so the prop nuts will be self-tightening, based on: If using the purchased propeller guards (as recommended), the two outermost screws will need to go through the guard to hold it in place. Place it between the top of the arm and the bottom of the motor and line up the holes. Mount the motors with the the M3 x 14mm screws onto the drone arms with the wires running straight back along the arm, as seen above MAKE SURE THE SCREWS ARE NOT CONTACTING THE MOTOR WINDINGS! This would be catastrophic for the motors. 14mm is the max length when using the purchased propeller guards, and shorter screws should be used when not using the purchased propeller guards (~10mm). If you can use a shorter screw and secure the motor through the guard, then definitely do so. Connect the motor leads to the ESC's with the bullet connectors, as seen below. Use one small zip tie to secure the ESC against the inside of the Q380 arm and another to hold the wires together, also secured to the inside of the Q380 arm. Check Spin Direction Check that the motors are spinning in the correct direction before adding the propellers, as mentioned in Motor/Servo Checks . There are MANY ways to do so, but one method we found convenient (once the drone is fully assembled / setup) is: MAKE SURE NO PROPELLERS ARE INSTALLED! Ensure all connections are made supplying power to the motors and Pixhawk Connect the PWM cables from the ESC's to the Pixhawk PWM-out ports per Quadrotor x Airframe Reference Connect the battery so the Pixhawk boots up and pre-arm the drone with the arming button. The motors should beep, indicating they are powered up Use the radio controller to arm the drone with the arming gesture, which will cause the motors to spin at the lowest PWM value (duty cycle) This is a PX4 parameter called PWM_MIN that can be changed in QGroundControl, if the default value of 1000 is too low. See PWM Outputs - Parameter Reference Verify that the issue is that the PWM_MIN parameter is set too low before changing it by gently throttling up on the remote control as though you were flying. If this doesn't cause the motors to spin, there is another issue in your setup. Lightly touch the SLOWLY spinning motors with your finger to feel which direction they are spinning and verify it matches the design If they are visibly spinning quickly, do not touch the moving parts Disarm the drone and remove the connected power before making any necessary wiring changes If the spin direction of any given motor is backwards, possible causes include: The red/blue/black cable order connecting the ESC to the motor is incorrect The ESC/motor PWM cable is connected to the wrong port on the Pixhawk The ESC/motor PWM cable is flipped in the port on the Pixhawk Propellers The propellers should not be added until: The motor spin direction has been verified Improper spin direction of one or more motors will cause an immediate crash You are fully ready to fly It can be dangerous to work on the drone and/or debug software with the propellers connected, as one may unexpectedly begin turning and cause damage / injury. To attach the propellers: Match the CW & CCW propellers to the motors they will be attached to It is better to base this off of the leading edge rather than any propeller markings, as the markings can vary between propeller manufacturers Use the nut included with the prop adapter to secure the propeller It is not necessary to over-tighten these nuts, as they should be self-tightening during flight If you see them coming loose during flight, you may have swapped the CW & CCW adapters around","title":"Propulsion"},{"location":"assembly/propulsion/#propulsion-assembly","text":"","title":"Propulsion Assembly"},{"location":"assembly/propulsion/#required-parts","text":"4x 30A, 2S-4S ESC's 4x SunnySky X2216 V3 - 1250kV - short shaft motors 4x Propeller guards (8045 size) 4x 8045 Propellers 2x CW & 2x CCW 1x 5mm (M5) prop adapters kit 2x CW & 2x CCW 16x M3 x 14mm screws 12x 3.5 mm bullet connectors (female) 8x small zip ties (e.g. 100mm x 2.5mm)","title":"Required Parts"},{"location":"assembly/propulsion/#procedure","text":"When installing the propulsion system it is important to keep in mind that the motors will spin in different directions, clockwise (CW) or counter-clockwise (CCW), based on the motor location. This image, from the PX4 documentation, shows the motor id and the propeller spin direction for a Quad X multi-rotor copter like ours.","title":"Procedure"},{"location":"assembly/propulsion/#esc","text":"The SunnySky motors we are using come equipped with 3.5 mm bullet connectors (male). You will need to solder the female bullet connectors onto the 3 loose wires coming out of the ESC and insulate them with some thermal shrink fit. Add thermal shrink fit over the ESC's for insulation / protection. Note that we used the clear thermal fit on the CW ESC's and the black on the CCW ESC's for easier identification, but they are identical electrically. Solder the loose ESC power-in cables to the open terminals on the underside of the Q380 drone frame bottom plate, where the arm connects to the bottom plate. Red -> Positive | Black -> Negative In the Sensor Plate Assembly instructions, you will add an extension to the PWM connection cable, so you can leave this cable loose for now. Once that extension is prepared, the ESC's PWM cable plugs into the extension where the arm connects to the bottom plate. The connections will be made based on Quadrotor x Airframe Reference .","title":"ESC"},{"location":"assembly/propulsion/#motor-mounting","text":"Install the CW & CCW propeller adapters (2 of each) onto the motors using the M2 screws that come in the kit. The supplied adapters with the SunnySky motors are all one direction, so you would experience self-loosening on two of the motors if you didn't use the purchased adapter kit. Select motor locations so the prop nuts will be self-tightening, based on: If using the purchased propeller guards (as recommended), the two outermost screws will need to go through the guard to hold it in place. Place it between the top of the arm and the bottom of the motor and line up the holes. Mount the motors with the the M3 x 14mm screws onto the drone arms with the wires running straight back along the arm, as seen above MAKE SURE THE SCREWS ARE NOT CONTACTING THE MOTOR WINDINGS! This would be catastrophic for the motors. 14mm is the max length when using the purchased propeller guards, and shorter screws should be used when not using the purchased propeller guards (~10mm). If you can use a shorter screw and secure the motor through the guard, then definitely do so. Connect the motor leads to the ESC's with the bullet connectors, as seen below. Use one small zip tie to secure the ESC against the inside of the Q380 arm and another to hold the wires together, also secured to the inside of the Q380 arm.","title":"Motor Mounting"},{"location":"assembly/propulsion/#check-spin-direction","text":"Check that the motors are spinning in the correct direction before adding the propellers, as mentioned in Motor/Servo Checks . There are MANY ways to do so, but one method we found convenient (once the drone is fully assembled / setup) is: MAKE SURE NO PROPELLERS ARE INSTALLED! Ensure all connections are made supplying power to the motors and Pixhawk Connect the PWM cables from the ESC's to the Pixhawk PWM-out ports per Quadrotor x Airframe Reference Connect the battery so the Pixhawk boots up and pre-arm the drone with the arming button. The motors should beep, indicating they are powered up Use the radio controller to arm the drone with the arming gesture, which will cause the motors to spin at the lowest PWM value (duty cycle) This is a PX4 parameter called PWM_MIN that can be changed in QGroundControl, if the default value of 1000 is too low. See PWM Outputs - Parameter Reference Verify that the issue is that the PWM_MIN parameter is set too low before changing it by gently throttling up on the remote control as though you were flying. If this doesn't cause the motors to spin, there is another issue in your setup. Lightly touch the SLOWLY spinning motors with your finger to feel which direction they are spinning and verify it matches the design If they are visibly spinning quickly, do not touch the moving parts Disarm the drone and remove the connected power before making any necessary wiring changes If the spin direction of any given motor is backwards, possible causes include: The red/blue/black cable order connecting the ESC to the motor is incorrect The ESC/motor PWM cable is connected to the wrong port on the Pixhawk The ESC/motor PWM cable is flipped in the port on the Pixhawk","title":"Check Spin Direction"},{"location":"assembly/propulsion/#propellers","text":"The propellers should not be added until: The motor spin direction has been verified Improper spin direction of one or more motors will cause an immediate crash You are fully ready to fly It can be dangerous to work on the drone and/or debug software with the propellers connected, as one may unexpectedly begin turning and cause damage / injury. To attach the propellers: Match the CW & CCW propellers to the motors they will be attached to It is better to base this off of the leading edge rather than any propeller markings, as the markings can vary between propeller manufacturers Use the nut included with the prop adapter to secure the propeller It is not necessary to over-tighten these nuts, as they should be self-tightening during flight If you see them coming loose during flight, you may have swapped the CW & CCW adapters around","title":"Propellers"},{"location":"assembly/sensor_plate/","text":"Sensor Plate The sensor plate is a 3D printed base to help expand the available space in the bottom plate of the drone to allocate the PX4, Teraranger Evo Mini,Y-PWR,and PMW3901 while allowing for a better cable distribution underneath. This particular setup allows for easy access to the controller and the sensors. Top view Side view Bottom view PWM cable holder The plate itself is easy to attach, it has 4 clips to the side (see the side and bottom view) that allow to snap the plate to the bottom of the frame. The best way to fit the plate without risk of breaking the clips is to start with one side. Fit the frame's bottom plate left or right side in between the 2 clips on that same side, once you feel that the plate is in position, push the other side. The following picture is a clearer example. To install the components, please refer to the following image. First, the necessary cables are needed to be placed in the bottom plate of the frame. You will notice a small spline near the ESC PWM extension holder, this is intended to allow the cable to run through. Note that the ESC PWM cable extender has two colors, red and grey. The red cable indicates the signal to be connected to the ESC. The following image shows the intended final mounting. The PX4 is secured with a zip tie that runs under the 3D printed plate and the vibration damper, the little hexagons allow the zip tie to run easily. The PMW3901, Teraranger Evo Mini and the Y-PWR have a two side sticky pad to adhere to the plate. All the cables run in the gap between the bottom plate and the sensor plate.","title":"Sensor Plate"},{"location":"assembly/sensor_plate/#sensor-plate","text":"The sensor plate is a 3D printed base to help expand the available space in the bottom plate of the drone to allocate the PX4, Teraranger Evo Mini,Y-PWR,and PMW3901 while allowing for a better cable distribution underneath. This particular setup allows for easy access to the controller and the sensors. Top view Side view Bottom view PWM cable holder The plate itself is easy to attach, it has 4 clips to the side (see the side and bottom view) that allow to snap the plate to the bottom of the frame. The best way to fit the plate without risk of breaking the clips is to start with one side. Fit the frame's bottom plate left or right side in between the 2 clips on that same side, once you feel that the plate is in position, push the other side. The following picture is a clearer example. To install the components, please refer to the following image. First, the necessary cables are needed to be placed in the bottom plate of the frame. You will notice a small spline near the ESC PWM extension holder, this is intended to allow the cable to run through. Note that the ESC PWM cable extender has two colors, red and grey. The red cable indicates the signal to be connected to the ESC. The following image shows the intended final mounting. The PX4 is secured with a zip tie that runs under the 3D printed plate and the vibration damper, the little hexagons allow the zip tie to run easily. The PMW3901, Teraranger Evo Mini and the Y-PWR have a two side sticky pad to adhere to the plate. All the cables run in the gap between the bottom plate and the sensor plate.","title":"Sensor Plate"},{"location":"design/electrical/","text":"Electrical design considerations. As stated previously, the aim of the project was to improve previous versions of the research drones. The reported issues with the previous platforms are: Hexacopter: Burnt motors, high pitch noise. Quadcopter: NUC power disruption on takeoff or power surge. No current sensor. Two PDBs used. Each motor would need to generate at least ~1.3 kg of force to keep the 2:1 ratio. From the vast options of motors and propeller configurations, we employed eCalc 1 to have a better guideline to select the adequate motor. We selected SunnySky X2216-7 1250 KV III for its ratings and specs. eCalc was taken as a rough estimate/guideline of the final performance of the drone. According to SunnySky datasheet , the following combination meets the requirements: Electrical Diagram Taking these considerations, the electrical diagram/design is the following: The Q380 bottom plate was used as the PDB, this simplifies the cabling and saves space. We decided to keep the Y-PWR hot-swap load sharing controller, as it acts as an ideal OR to alternate between battery power and wall power. The 2200uF capacitor was selected according to recommended values for drones, to filter ripples, spikes and noise from the LiPo battery (produced by variations in the voltage, current, and frequency demanded by the circuit), the aim is to provide a more stable output. This capacitor can also provide voltage for a brief instance if there is a sharp voltage drop or power surge, such as drone take off. Given the fact that the payload of the drone was expected to be at most 2.5 kg, the ideal motor needed to be a low KV (Rpm per volt) motor. The advantage of a low KV motor is that it produces more torque (hence a bigger propeller can be used), thus generates more static thrust for lifting at a lower current draw compared to higher KV motors. The downside is that the motors are not as fast as higher KV mototrs, however this is desired for the end applicaiton. According to the SunnySky datasheet for the 1250kV motors, the motors will draw a maximum of 36.2 A each if the thrust generated is 1.37 kg. However, as the thrust required to lift the drone (hovering) will never reach that value, the average draw will at most be 20 Amps. Hence, 30 A ESC were selected, these have proven to work properly with our setup. To properly calibrate the ESC, so that the controller knows the maximum and minimum PWM values that can be provided, we employed a function generator. ESC calibration may vary between different brands, however, for the selected ESC, the following method works: Generate a 5V pulse train with a frequency of 50Hz. Set the Duty Cycle to 5%. Connect the function generator output to the ESC PWM wires. Connect the battery to the drone. Set the function generator output to ON. You should hear a tone with 2 or 3 beeps. After the tones, increase the Duty Cycle to 10%, a number of beeps will be heard, followed by an intermittent tone, which will indicate that the calibration process is done. Alternatively, you can use QgroundControl To power the NUC and the PX4 controller, DC/DC converters were selected. Despite the fact that the NUC could be operated directly from the LiPo battery as the input voltage ranges from 12V to 19V, it is not desirable. Voltage dips and transients can damage or affect the NUC operation. E.g. at take off, a voltage sag may result from the power surge demanded by motors and turn off the NUC (voltage lower than 12 V). For this reason, a 150W DC/DC Boost converter was selected to deliver a maximum constant 17 V to the NUC, despite changes in the input voltage. For the PX4, a Buck converter was used to deliver continuous 5 V to the controller. The same selection criteria applies for the controller. The power module that is connected right after the battery is mainly used to provide the current and voltage sensor readings to the PX4, however, the actual voltage to power the PX4, comes from the 5V Buck converter after the Y-PWR board. This achieves the following: The PX4 switch is used to turn ON/OFF the controller and the V/A sensor reading. If the PX4 gets powered by the NUC (USB), the switch enables/disables the V/A reading (as a second safety measure, the drone will not arm).","title":"Electrical design"},{"location":"design/electrical/#electrical-design-considerations","text":"As stated previously, the aim of the project was to improve previous versions of the research drones. The reported issues with the previous platforms are: Hexacopter: Burnt motors, high pitch noise. Quadcopter: NUC power disruption on takeoff or power surge. No current sensor. Two PDBs used. Each motor would need to generate at least ~1.3 kg of force to keep the 2:1 ratio. From the vast options of motors and propeller configurations, we employed eCalc 1 to have a better guideline to select the adequate motor. We selected SunnySky X2216-7 1250 KV III for its ratings and specs. eCalc was taken as a rough estimate/guideline of the final performance of the drone. According to SunnySky datasheet , the following combination meets the requirements:","title":"Electrical design considerations."},{"location":"design/electrical/#electrical-diagram","text":"Taking these considerations, the electrical diagram/design is the following: The Q380 bottom plate was used as the PDB, this simplifies the cabling and saves space. We decided to keep the Y-PWR hot-swap load sharing controller, as it acts as an ideal OR to alternate between battery power and wall power. The 2200uF capacitor was selected according to recommended values for drones, to filter ripples, spikes and noise from the LiPo battery (produced by variations in the voltage, current, and frequency demanded by the circuit), the aim is to provide a more stable output. This capacitor can also provide voltage for a brief instance if there is a sharp voltage drop or power surge, such as drone take off. Given the fact that the payload of the drone was expected to be at most 2.5 kg, the ideal motor needed to be a low KV (Rpm per volt) motor. The advantage of a low KV motor is that it produces more torque (hence a bigger propeller can be used), thus generates more static thrust for lifting at a lower current draw compared to higher KV motors. The downside is that the motors are not as fast as higher KV mototrs, however this is desired for the end applicaiton. According to the SunnySky datasheet for the 1250kV motors, the motors will draw a maximum of 36.2 A each if the thrust generated is 1.37 kg. However, as the thrust required to lift the drone (hovering) will never reach that value, the average draw will at most be 20 Amps. Hence, 30 A ESC were selected, these have proven to work properly with our setup. To properly calibrate the ESC, so that the controller knows the maximum and minimum PWM values that can be provided, we employed a function generator. ESC calibration may vary between different brands, however, for the selected ESC, the following method works: Generate a 5V pulse train with a frequency of 50Hz. Set the Duty Cycle to 5%. Connect the function generator output to the ESC PWM wires. Connect the battery to the drone. Set the function generator output to ON. You should hear a tone with 2 or 3 beeps. After the tones, increase the Duty Cycle to 10%, a number of beeps will be heard, followed by an intermittent tone, which will indicate that the calibration process is done. Alternatively, you can use QgroundControl To power the NUC and the PX4 controller, DC/DC converters were selected. Despite the fact that the NUC could be operated directly from the LiPo battery as the input voltage ranges from 12V to 19V, it is not desirable. Voltage dips and transients can damage or affect the NUC operation. E.g. at take off, a voltage sag may result from the power surge demanded by motors and turn off the NUC (voltage lower than 12 V). For this reason, a 150W DC/DC Boost converter was selected to deliver a maximum constant 17 V to the NUC, despite changes in the input voltage. For the PX4, a Buck converter was used to deliver continuous 5 V to the controller. The same selection criteria applies for the controller. The power module that is connected right after the battery is mainly used to provide the current and voltage sensor readings to the PX4, however, the actual voltage to power the PX4, comes from the 5V Buck converter after the Y-PWR board. This achieves the following: The PX4 switch is used to turn ON/OFF the controller and the V/A sensor reading. If the PX4 gets powered by the NUC (USB), the switch enables/disables the V/A reading (as a second safety measure, the drone will not arm).","title":"Electrical Diagram"},{"location":"design/flight_considerations/","text":"Flight Considerations For the drone to be useful for indoor navigation a long flight time (within reason) is desired. For this project, the aim was to achieve a ~10 minute flight with the following considerations were estimated: The expected flight time is determined by a simple formula: where, t flight is the flight time of your drone in minutes; Q is the LiPo battery capacity in mAh; I flying load is the current drawn from the battery by the motors and other equipment assuming the selected flying load, which is based on the type of flying and the weight of the drone. The maximum current drawn from the battery at full flying load I max full load is determined as I max full load = I other + I motor * N motor where I other is the maximum current in amps drawn by various multicopter equipment excluding its motors; I other is the maximum current in amps drawn by a single motor; N motors is the number of motors. The maximum power consumed by the drone W max is defined as W max = I max full load * V bat nominal With 4000mAh LiPo battery: Expected weight of ~2 kg. ~ 500 g thrust@hover/motor -> 7.4 A draw (ideally). ~ 40 A draw from all motors + ~3A draw from normal NUC operation + 20% safety factor. Estimated flight time is = (4 A/ 40 A) * 60 min/hr = 6 min Although, this battery does not deliver the necessary flight time, it was useful to test the drone at earlier stages without hardware modifications. Once the drone was stable at flight, we moved into a larger battery. With 8000mAh LiPo battery: Expected weight of ~2 kg. ~ 500 g thrust@hover/motor -> 7.4 A draw (ideally). ~ 50 A draw from all motors + ~3A draw from normal NUC operation + 20% safety factor. Estimated flight time is = (8 A/ 50 A) * 60 min/hr = 9.6 min With the final iteration of the drone, the following holds: Drone weight with 3 cameras, flight controller, sensors and NUC is currently at 2.5 kg 8500 mAh battery is used to achieve a 12:44 minute flight. Power consumption increased (due to weight increase) to ~80 Amps. Despite the consumption, the battery is never depleted lower than 3.3 V per cell ( for a 4S battery). The recommended limit by the manufacturer to avoid damage to the battery is 3.2 V. Power consumption for the NUC with all 3 RealSense cameras working never exceeds 5 A, with an average of 3.3 A. Current flight time is = 12:44 min All the flight times that were measured in the flight tests were considering a static hovering, so expect the flight time to vary slightly if performing more dynamic movements. General considerations when handling the batteries: Never allow the voltage per cell drop below 3.2 V under load (flying) Wait for the battery to cool down before charging Balance-charge the batteries at 1C to avoid overcharging or damage Keep batteries inside protective bags","title":"Flight time considerations"},{"location":"design/flight_considerations/#flight-considerations","text":"For the drone to be useful for indoor navigation a long flight time (within reason) is desired. For this project, the aim was to achieve a ~10 minute flight with the following considerations were estimated: The expected flight time is determined by a simple formula: where, t flight is the flight time of your drone in minutes; Q is the LiPo battery capacity in mAh; I flying load is the current drawn from the battery by the motors and other equipment assuming the selected flying load, which is based on the type of flying and the weight of the drone. The maximum current drawn from the battery at full flying load I max full load is determined as I max full load = I other + I motor * N motor where I other is the maximum current in amps drawn by various multicopter equipment excluding its motors; I other is the maximum current in amps drawn by a single motor; N motors is the number of motors. The maximum power consumed by the drone W max is defined as W max = I max full load * V bat nominal With 4000mAh LiPo battery: Expected weight of ~2 kg. ~ 500 g thrust@hover/motor -> 7.4 A draw (ideally). ~ 40 A draw from all motors + ~3A draw from normal NUC operation + 20% safety factor. Estimated flight time is = (4 A/ 40 A) * 60 min/hr = 6 min Although, this battery does not deliver the necessary flight time, it was useful to test the drone at earlier stages without hardware modifications. Once the drone was stable at flight, we moved into a larger battery. With 8000mAh LiPo battery: Expected weight of ~2 kg. ~ 500 g thrust@hover/motor -> 7.4 A draw (ideally). ~ 50 A draw from all motors + ~3A draw from normal NUC operation + 20% safety factor. Estimated flight time is = (8 A/ 50 A) * 60 min/hr = 9.6 min With the final iteration of the drone, the following holds: Drone weight with 3 cameras, flight controller, sensors and NUC is currently at 2.5 kg 8500 mAh battery is used to achieve a 12:44 minute flight. Power consumption increased (due to weight increase) to ~80 Amps. Despite the consumption, the battery is never depleted lower than 3.3 V per cell ( for a 4S battery). The recommended limit by the manufacturer to avoid damage to the battery is 3.2 V. Power consumption for the NUC with all 3 RealSense cameras working never exceeds 5 A, with an average of 3.3 A. Current flight time is = 12:44 min All the flight times that were measured in the flight tests were considering a static hovering, so expect the flight time to vary slightly if performing more dynamic movements.","title":"Flight Considerations"},{"location":"design/flight_considerations/#general-considerations-when-handling-the-batteries","text":"Never allow the voltage per cell drop below 3.2 V under load (flying) Wait for the battery to cool down before charging Balance-charge the batteries at 1C to avoid overcharging or damage Keep batteries inside protective bags","title":"General considerations when handling the batteries:"},{"location":"design/mechanical/","text":"Mechanical design considerations. The main objective of this project was to improve the existing drone platforms, with the following specs: Exisitng Drone Specs Quadcopter Hexacopter Wheelbase (mm) 260 290 Prop size (mm) * 153 127 Max width (mm) 370 420 Occupancy sphere radius 207 209 Empty Mass (g) 760 1376 Full Mass (TX2, 4000mAh LiPo) 1328 2026 Number Propellers 4 6 Minimum Thrust Ratio ( _ : 1 ) 2 2 Minimum Thrust per motor (g) 664 676 * Hexacopter uses three blade propellers Starting with the frame, we decided upon a X body, as it is symmetric (pitch & roll), strong, compact and simple. Its natural symmetry is better for balancing flying forces. Considering as well the biggest element the drone carries (Intel NUC), the ideal dimensions were reduced to the following diagram. Element Size(mm) Wheelbase 380 Propeller 204 Drone Occupancy Radius 292 Drone Occupancy Diameter 584 Clearance 124 To determine the type of motors and size of the propellers, we took an estimate of the total mass that the drone had to lift, taking the following considerations: Expected Mass Calculations - Fully Loaded Component Component Mass (g) Count Frame with landing gear 710 1 NUC 226 1 TX2 174 0 LiPo Battery (4000 mAh) 392 0 LiPo Battery (8500 mAh) 672 1 RealSense D435i 72 2 RealSense D455 120 0 RealSense L515 100 1 SunnySky X2216-7 1250 KV III 69 4 Low Level Hardware 445 1 Total 2573 N/A Ideally we want to have a hovering lift force equal to the weight of the drone, that is a thrust ratio of 2:1. Hence, the maximum thrust we need to generate is 5146 g. Thrust Calculations Expected mass (g) 2573 Thrust ratio ( _ : 1 ) 2 Required Thrust (g) 5146 Motor Count 4 Minimum thrust per motor (g) 1287 For the actual drone frame, we chose the Q380 X frame due to the following useful features: Complies with the 380-400 mm wheelbase size requirement Glass filled nylon arms for increased strength and durability Lightweight arm design Integrated PDB for easy wiring and tidy installation Increased internal space for additional electronics/equipment Additional mounting holes for frame upgrades Arguably the arm design allows for better CG","title":"Mechanical design"},{"location":"design/mechanical/#mechanical-design-considerations","text":"The main objective of this project was to improve the existing drone platforms, with the following specs: Exisitng Drone Specs Quadcopter Hexacopter Wheelbase (mm) 260 290 Prop size (mm) * 153 127 Max width (mm) 370 420 Occupancy sphere radius 207 209 Empty Mass (g) 760 1376 Full Mass (TX2, 4000mAh LiPo) 1328 2026 Number Propellers 4 6 Minimum Thrust Ratio ( _ : 1 ) 2 2 Minimum Thrust per motor (g) 664 676 * Hexacopter uses three blade propellers Starting with the frame, we decided upon a X body, as it is symmetric (pitch & roll), strong, compact and simple. Its natural symmetry is better for balancing flying forces. Considering as well the biggest element the drone carries (Intel NUC), the ideal dimensions were reduced to the following diagram. Element Size(mm) Wheelbase 380 Propeller 204 Drone Occupancy Radius 292 Drone Occupancy Diameter 584 Clearance 124 To determine the type of motors and size of the propellers, we took an estimate of the total mass that the drone had to lift, taking the following considerations: Expected Mass Calculations - Fully Loaded Component Component Mass (g) Count Frame with landing gear 710 1 NUC 226 1 TX2 174 0 LiPo Battery (4000 mAh) 392 0 LiPo Battery (8500 mAh) 672 1 RealSense D435i 72 2 RealSense D455 120 0 RealSense L515 100 1 SunnySky X2216-7 1250 KV III 69 4 Low Level Hardware 445 1 Total 2573 N/A Ideally we want to have a hovering lift force equal to the weight of the drone, that is a thrust ratio of 2:1. Hence, the maximum thrust we need to generate is 5146 g. Thrust Calculations Expected mass (g) 2573 Thrust ratio ( _ : 1 ) 2 Required Thrust (g) 5146 Motor Count 4 Minimum thrust per motor (g) 1287 For the actual drone frame, we chose the Q380 X frame due to the following useful features: Complies with the 380-400 mm wheelbase size requirement Glass filled nylon arms for increased strength and durability Lightweight arm design Integrated PDB for easy wiring and tidy installation Increased internal space for additional electronics/equipment Additional mounting holes for frame upgrades Arguably the arm design allows for better CG","title":"Mechanical design considerations."},{"location":"design/overview/","text":"Design Overview The main objective of this project was to improve the existing drone platforms. Previous working quadcopter Previous working hexacopter In order to design the new drone, we first required to take into consideration the space limitations on which the previous drones operated and their current specs. In this case, as an indoor drone, it was desirable to be able to pass through doors (800 mm wide) with enough clearance. Given this constrain, we then required to choose the type of frame, motors and propellers that could meet the following requirements: Primary Design Objectives Isotropic quadcopter Longer flight time (10+ minutes) 600 mm maximum blade tip-to-tip distance Stable flight (designed for indoor mapping & SLAM, not for racing) Heavier & more configurable payloads (3 Intel RealSense cameras & a NUC) Serviceable design for easier maintenance Additional Design Objectives Better motor/propeller pairing Larger propellers -> lower motor RPM for same thrust \u2192 more efficient & less noise Better weight distribution Keep center of mass close to the center of the drone in all directions Better cable management Ability to tell where cables go and easily change cables/components out Parts that break, rather than bend Broken 3D printed parts can be quickly replaced Shock absorption for landing gear Protect sensitive components during hard landings MoCap reflectors For ground truth localization in certain environments Propeller guards Withstand collisions with doorways, walls, etc. Mandatory Hardware 1 Flight Control Unit - PX4 Flight Stack 1 Intel NUC computer 3 RealSense cameras (RGB-D): 1 LIDAR (L515) + 2 Stereo (D435i) 1 TeraRanger distance sensor, 1 Optical Flow sensor 1 Y-PWR Hotswap board DC/DC converters","title":"Overview"},{"location":"design/overview/#design-overview","text":"The main objective of this project was to improve the existing drone platforms. Previous working quadcopter Previous working hexacopter In order to design the new drone, we first required to take into consideration the space limitations on which the previous drones operated and their current specs. In this case, as an indoor drone, it was desirable to be able to pass through doors (800 mm wide) with enough clearance. Given this constrain, we then required to choose the type of frame, motors and propellers that could meet the following requirements:","title":"Design Overview"},{"location":"design/overview/#primary-design-objectives","text":"Isotropic quadcopter Longer flight time (10+ minutes) 600 mm maximum blade tip-to-tip distance Stable flight (designed for indoor mapping & SLAM, not for racing) Heavier & more configurable payloads (3 Intel RealSense cameras & a NUC) Serviceable design for easier maintenance","title":"Primary Design Objectives"},{"location":"design/overview/#additional-design-objectives","text":"Better motor/propeller pairing Larger propellers -> lower motor RPM for same thrust \u2192 more efficient & less noise Better weight distribution Keep center of mass close to the center of the drone in all directions Better cable management Ability to tell where cables go and easily change cables/components out Parts that break, rather than bend Broken 3D printed parts can be quickly replaced Shock absorption for landing gear Protect sensitive components during hard landings MoCap reflectors For ground truth localization in certain environments Propeller guards Withstand collisions with doorways, walls, etc.","title":"Additional Design Objectives"},{"location":"design/overview/#mandatory-hardware","text":"1 Flight Control Unit - PX4 Flight Stack 1 Intel NUC computer 3 RealSense cameras (RGB-D): 1 LIDAR (L515) + 2 Stereo (D435i) 1 TeraRanger distance sensor, 1 Optical Flow sensor 1 Y-PWR Hotswap board DC/DC converters","title":"Mandatory Hardware"},{"location":"flying/flight_procedure/","text":"Flight Procedure Review Flight Safety instructions Review Flight Safety instructions again Set your QGroundControl parameter selections Especially EKF2_HGT_MODE (see PX4 Parameter Reference ) Set value to 2 for using TeraRanger distance sensor readings directly for z-axis position measurements Set value to 3 for using MoCAp or TeraRanger readings mapped through the MoCap topic (see distance_sensor_override.py ) for z-axis position measurements Configure relevant files such as uav.launch , px4_config.yaml , & px4_pluginlists.yaml Select which RealSense cameras to use, z-axis estimate mode, etc. Safely place drone in the flying cage and reboot/prearm the Pixhawk 4 You must be wearing PPE (gloves, safety glasses, ear muffs). Prearming is done with the pre-arming button. Launch necessary ROS nodes roslaunch rpl uav.launch Verify the TeraRanger distance sensor is actively reporting distance values either through MAVROS or in QGroundControl (unless using alternative z-axis position source) If not, repeat the reboot/prearm procedure until it is. Begin recording video of flight with an external camera (w/ a view of the flight area) Begin recording a rosbag of point cloud data (by default, there is a rosbag being recorded with all relevant topics -mavros and tf- when launching the uav.launch file ) rosbag record --lz4 -O cameras_outside_net.b_2ag /tf /tf_static /l515/depth/color/points /d435_r/depth/color/points /d435_l/depth/color/points Arm the drone with the Arming Gesture Requires that the mode switch is set to Manual Mode (should be [SA] if you followed our Flight Modes setup instructions) The Taranis X9D Plus is a Mode 2 transmitter (should be default) Visually verify all propellers are spinning Takeoff in Manual Mode by pushing the left throttle stick up towards a max of ~ 50% until you are ~ 1 m above ground This requires getting a feel for how fast to accelerate based on the drone's specific configuration during this flight Switch to Position Mode (Multicopter) by flipping the [SA] switch to centered position Center the throttle switch at 50% and fly based on Position Mode (Mode 2 remote) instructions When you are ready to land, or hear the low voltage alarm, fly above a flat landing spot and throttle stick down in Position Mode until the drone lands Switch to Manual Mode ( [SA] up) and disarm with the disarming gesture Stop ROS nodes, ROSBAG recording, and external video recording Enter the flying cage (with full PPE) and fully disarm the pre-arming button Proceed to Flight Reporting instructions","title":"Flight Procedure"},{"location":"flying/flight_procedure/#flight-procedure","text":"Review Flight Safety instructions Review Flight Safety instructions again Set your QGroundControl parameter selections Especially EKF2_HGT_MODE (see PX4 Parameter Reference ) Set value to 2 for using TeraRanger distance sensor readings directly for z-axis position measurements Set value to 3 for using MoCAp or TeraRanger readings mapped through the MoCap topic (see distance_sensor_override.py ) for z-axis position measurements Configure relevant files such as uav.launch , px4_config.yaml , & px4_pluginlists.yaml Select which RealSense cameras to use, z-axis estimate mode, etc. Safely place drone in the flying cage and reboot/prearm the Pixhawk 4 You must be wearing PPE (gloves, safety glasses, ear muffs). Prearming is done with the pre-arming button. Launch necessary ROS nodes roslaunch rpl uav.launch Verify the TeraRanger distance sensor is actively reporting distance values either through MAVROS or in QGroundControl (unless using alternative z-axis position source) If not, repeat the reboot/prearm procedure until it is. Begin recording video of flight with an external camera (w/ a view of the flight area) Begin recording a rosbag of point cloud data (by default, there is a rosbag being recorded with all relevant topics -mavros and tf- when launching the uav.launch file ) rosbag record --lz4 -O cameras_outside_net.b_2ag /tf /tf_static /l515/depth/color/points /d435_r/depth/color/points /d435_l/depth/color/points Arm the drone with the Arming Gesture Requires that the mode switch is set to Manual Mode (should be [SA] if you followed our Flight Modes setup instructions) The Taranis X9D Plus is a Mode 2 transmitter (should be default) Visually verify all propellers are spinning Takeoff in Manual Mode by pushing the left throttle stick up towards a max of ~ 50% until you are ~ 1 m above ground This requires getting a feel for how fast to accelerate based on the drone's specific configuration during this flight Switch to Position Mode (Multicopter) by flipping the [SA] switch to centered position Center the throttle switch at 50% and fly based on Position Mode (Mode 2 remote) instructions When you are ready to land, or hear the low voltage alarm, fly above a flat landing spot and throttle stick down in Position Mode until the drone lands Switch to Manual Mode ( [SA] up) and disarm with the disarming gesture Stop ROS nodes, ROSBAG recording, and external video recording Enter the flying cage (with full PPE) and fully disarm the pre-arming button Proceed to Flight Reporting instructions","title":"Flight Procedure"},{"location":"flying/flight_reporting/","text":"Flight Reporting After the flight, there will be a few different sources of useful flight data that should be compiled and stored for analysis and future reference. This includes: Flight ROSBAG PX4 log External video Flight notes Examples of the what & how to save this flight data can be found in the Flight tests section of the Weekly Updates & Tests page. Flight ROSBAG The complete list of topics that are recorded: rpl@ribbitV2:~$ rostopic list /mavlink/from /mavlink/gcs_ip /mavlink/to /mavros/actuator_control /mavros/adsb/send /mavros/adsb/vehicle /mavros/altitude /mavros/battery /mavros/cam_imu_sync/cam_imu_stamp /mavros/companion_process/status /mavros/debug_value/debug /mavros/debug_value/debug_vector /mavros/debug_value/named_value_float /mavros/debug_value/named_value_int /mavros/debug_value/send /mavros/distance_sensor/teraranger /mavros/esc_info /mavros/esc_status /mavros/estimator_status /mavros/extended_state /mavros/fake_gps/mocap/tf /mavros/global_position/compass_hdg /mavros/global_position/global /mavros/global_position/gp_lp_offset /mavros/global_position/gp_origin /mavros/global_position/home /mavros/global_position/local /mavros/global_position/raw/fix /mavros/global_position/raw/gps_vel /mavros/global_position/raw/satellites /mavros/global_position/rel_alt /mavros/global_position/set_gp_origin /mavros/gps_rtk/rtk_baseline /mavros/gps_rtk/send_rtcm /mavros/gpsstatus/gps1/raw /mavros/gpsstatus/gps1/rtk /mavros/gpsstatus/gps2/raw /mavros/gpsstatus/gps2/rtk /mavros/hil/actuator_controls /mavros/hil/controls /mavros/hil/gps /mavros/hil/imu_ned /mavros/hil/optical_flow /mavros/hil/rc_inputs /mavros/hil/state /mavros/home_position/home /mavros/home_position/set /mavros/imu/data /mavros/imu/data_raw /mavros/imu/diff_pressure /mavros/imu/mag /mavros/imu/static_pressure /mavros/imu/temperature_baro /mavros/imu/temperature_imu /mavros/landing_target/lt_marker /mavros/landing_target/pose /mavros/landing_target/pose_in /mavros/local_position/accel /mavros/local_position/odom /mavros/local_position/pose /mavros/local_position/pose_cov /mavros/local_position/velocity_body /mavros/local_position/velocity_body_cov /mavros/local_position/velocity_local /mavros/log_transfer/raw/log_data /mavros/log_transfer/raw/log_entry /mavros/manual_control/control /mavros/manual_control/send /mavros/mission/reached /mavros/mission/waypoints /mavros/mocap/pose /mavros/mocap/pose2d /mavros/mount_control/command /mavros/mount_control/orientation /mavros/obstacle/send /mavros/odometry/in /mavros/odometry/out /mavros/onboard_computer/status /mavros/param/param_value /mavros/play_tune /mavros/px4flow/ground_distance /mavros/px4flow/raw/optical_flow_rad /mavros/px4flow/raw/send /mavros/px4flow/temperature /mavros/radio_status /mavros/rangefinder/rangefinder /mavros/rc/in /mavros/rc/out /mavros/rc/override /mavros/setpoint_accel/accel /mavros/setpoint_attitude/cmd_vel /mavros/setpoint_attitude/thrust /mavros/setpoint_position/global /mavros/setpoint_position/global_to_local /mavros/setpoint_position/local /mavros/setpoint_raw/attitude /mavros/setpoint_raw/global /mavros/setpoint_raw/local /mavros/setpoint_raw/target_attitude /mavros/setpoint_raw/target_global /mavros/setpoint_raw/target_local /mavros/setpoint_trajectory/desired /mavros/setpoint_trajectory/local /mavros/setpoint_velocity/cmd_vel /mavros/setpoint_velocity/cmd_vel_unstamped /mavros/state /mavros/statustext/recv /mavros/statustext/send /mavros/target_actuator_control /mavros/time_reference /mavros/timesync_status /mavros/trajectory/desired /mavros/trajectory/generated /mavros/trajectory/path /mavros/vfr_hud /mavros/vibration/raw/vibration /mavros/vision_pose/pose /mavros/vision_pose/pose_cov /mavros/vision_speed/speed_vector /mavros/wind_estimation /rosout /rosout_agg /tf /tf_static For each flight, you should record a ROSBAG . If you are unfamiliar with this process, see the ROSBAG Tutorials . Be sure to record all mavros/ and tf/ topics, and omit unnecessary topics, so you can more easily replay and analyze these ROSBAGs at a later date. Additionally, if any RealSense cameras are collecting data, the data should be also be saved in the ROSBAGs. Since 10+ minutes the 3D camera data from three RealSense cameras will be an impractically large file, it recommended that you record a base ROSBAG with all topics mentioned above for the duration of the flight and additional ROSBAGs of < 1 min with these topics AND the realsense/ camera topics during the periods of interest. PX4 Logs The PX4 logs can be downloaded after the flight from QGroundControl and analyzed, as described in Flight Reporting . Note: It is recommended to keep SDLOG_MODE at it's default value of 0 so you don't record unnecessary log data. Flight Review The Flight Review tool they recommend proved very useful for us. Follow the guidance in Log Analysis using Flight Review for details on how to interpret the Flight Review results. ECL EKF Analysis Another useful tool is the ECL EKF Analysis tool from Auterion . This tool should already be installed in the tools/ directory of your PX4-Autopilot installation. If it isn't, you should be able to follow the installation instructions in their repo. Process your PX4 logs using the process_logdata_ekf.py script from the command line, e.g: ~$ ./PX4-Autopilot/Tools/ecl_ekf/process_logdata_ekf.py <path/to/PX4_log/filename>.ulg This will generate a .pdf report of states, values, etc. specific to the ECL EKF estimator data recorded over the duration the flight. External Video You should also record an external video of each flight. It is better if you have a dedicated camera for this, but a cell phone can be used if not. Recommendations: Try to get most/all of the flight volume in (unobstructed) view of the camera Mount/position the camera somewhere stable so it does not move Handheld video will be less pleasant to watch If filming through the net, stick the camera lens just inside the net so the net is not obstructing the camera's view Ensure you have enough battery/memory capacity to record the full flight Check out some examples of flight videos we recorded in the Flight tests section of the Weekly Updates & Tests page. Flight Notes It is recommended to jot down some notes about the flight immediately after the flight and especially during analysis of the flight data if you are debugging some issues. e.g: These sample notes were taken while we were performing battery life/flight duration tests, hence the focus on power consumption. The flight notes were also particularly useful for us when tuning the drone's PID controllers (see Multicopter PID Tuning Guide ) so that we could quickly & easily correspond PID parameter changes made with the resulting performance changes in the drone's flight. Check out some more examples of flight notes we took in the Flight tests section of the Weekly Updates & Tests page.","title":"Flight Reporting"},{"location":"flying/flight_reporting/#flight-reporting","text":"After the flight, there will be a few different sources of useful flight data that should be compiled and stored for analysis and future reference. This includes: Flight ROSBAG PX4 log External video Flight notes Examples of the what & how to save this flight data can be found in the Flight tests section of the Weekly Updates & Tests page.","title":"Flight Reporting"},{"location":"flying/flight_reporting/#flight-rosbag","text":"The complete list of topics that are recorded: rpl@ribbitV2:~$ rostopic list /mavlink/from /mavlink/gcs_ip /mavlink/to /mavros/actuator_control /mavros/adsb/send /mavros/adsb/vehicle /mavros/altitude /mavros/battery /mavros/cam_imu_sync/cam_imu_stamp /mavros/companion_process/status /mavros/debug_value/debug /mavros/debug_value/debug_vector /mavros/debug_value/named_value_float /mavros/debug_value/named_value_int /mavros/debug_value/send /mavros/distance_sensor/teraranger /mavros/esc_info /mavros/esc_status /mavros/estimator_status /mavros/extended_state /mavros/fake_gps/mocap/tf /mavros/global_position/compass_hdg /mavros/global_position/global /mavros/global_position/gp_lp_offset /mavros/global_position/gp_origin /mavros/global_position/home /mavros/global_position/local /mavros/global_position/raw/fix /mavros/global_position/raw/gps_vel /mavros/global_position/raw/satellites /mavros/global_position/rel_alt /mavros/global_position/set_gp_origin /mavros/gps_rtk/rtk_baseline /mavros/gps_rtk/send_rtcm /mavros/gpsstatus/gps1/raw /mavros/gpsstatus/gps1/rtk /mavros/gpsstatus/gps2/raw /mavros/gpsstatus/gps2/rtk /mavros/hil/actuator_controls /mavros/hil/controls /mavros/hil/gps /mavros/hil/imu_ned /mavros/hil/optical_flow /mavros/hil/rc_inputs /mavros/hil/state /mavros/home_position/home /mavros/home_position/set /mavros/imu/data /mavros/imu/data_raw /mavros/imu/diff_pressure /mavros/imu/mag /mavros/imu/static_pressure /mavros/imu/temperature_baro /mavros/imu/temperature_imu /mavros/landing_target/lt_marker /mavros/landing_target/pose /mavros/landing_target/pose_in /mavros/local_position/accel /mavros/local_position/odom /mavros/local_position/pose /mavros/local_position/pose_cov /mavros/local_position/velocity_body /mavros/local_position/velocity_body_cov /mavros/local_position/velocity_local /mavros/log_transfer/raw/log_data /mavros/log_transfer/raw/log_entry /mavros/manual_control/control /mavros/manual_control/send /mavros/mission/reached /mavros/mission/waypoints /mavros/mocap/pose /mavros/mocap/pose2d /mavros/mount_control/command /mavros/mount_control/orientation /mavros/obstacle/send /mavros/odometry/in /mavros/odometry/out /mavros/onboard_computer/status /mavros/param/param_value /mavros/play_tune /mavros/px4flow/ground_distance /mavros/px4flow/raw/optical_flow_rad /mavros/px4flow/raw/send /mavros/px4flow/temperature /mavros/radio_status /mavros/rangefinder/rangefinder /mavros/rc/in /mavros/rc/out /mavros/rc/override /mavros/setpoint_accel/accel /mavros/setpoint_attitude/cmd_vel /mavros/setpoint_attitude/thrust /mavros/setpoint_position/global /mavros/setpoint_position/global_to_local /mavros/setpoint_position/local /mavros/setpoint_raw/attitude /mavros/setpoint_raw/global /mavros/setpoint_raw/local /mavros/setpoint_raw/target_attitude /mavros/setpoint_raw/target_global /mavros/setpoint_raw/target_local /mavros/setpoint_trajectory/desired /mavros/setpoint_trajectory/local /mavros/setpoint_velocity/cmd_vel /mavros/setpoint_velocity/cmd_vel_unstamped /mavros/state /mavros/statustext/recv /mavros/statustext/send /mavros/target_actuator_control /mavros/time_reference /mavros/timesync_status /mavros/trajectory/desired /mavros/trajectory/generated /mavros/trajectory/path /mavros/vfr_hud /mavros/vibration/raw/vibration /mavros/vision_pose/pose /mavros/vision_pose/pose_cov /mavros/vision_speed/speed_vector /mavros/wind_estimation /rosout /rosout_agg /tf /tf_static For each flight, you should record a ROSBAG . If you are unfamiliar with this process, see the ROSBAG Tutorials . Be sure to record all mavros/ and tf/ topics, and omit unnecessary topics, so you can more easily replay and analyze these ROSBAGs at a later date. Additionally, if any RealSense cameras are collecting data, the data should be also be saved in the ROSBAGs. Since 10+ minutes the 3D camera data from three RealSense cameras will be an impractically large file, it recommended that you record a base ROSBAG with all topics mentioned above for the duration of the flight and additional ROSBAGs of < 1 min with these topics AND the realsense/ camera topics during the periods of interest.","title":"Flight ROSBAG"},{"location":"flying/flight_reporting/#px4-logs","text":"The PX4 logs can be downloaded after the flight from QGroundControl and analyzed, as described in Flight Reporting . Note: It is recommended to keep SDLOG_MODE at it's default value of 0 so you don't record unnecessary log data.","title":"PX4 Logs"},{"location":"flying/flight_reporting/#flight-review","text":"The Flight Review tool they recommend proved very useful for us. Follow the guidance in Log Analysis using Flight Review for details on how to interpret the Flight Review results.","title":"Flight Review"},{"location":"flying/flight_reporting/#ecl-ekf-analysis","text":"Another useful tool is the ECL EKF Analysis tool from Auterion . This tool should already be installed in the tools/ directory of your PX4-Autopilot installation. If it isn't, you should be able to follow the installation instructions in their repo. Process your PX4 logs using the process_logdata_ekf.py script from the command line, e.g: ~$ ./PX4-Autopilot/Tools/ecl_ekf/process_logdata_ekf.py <path/to/PX4_log/filename>.ulg This will generate a .pdf report of states, values, etc. specific to the ECL EKF estimator data recorded over the duration the flight.","title":"ECL EKF Analysis"},{"location":"flying/flight_reporting/#external-video","text":"You should also record an external video of each flight. It is better if you have a dedicated camera for this, but a cell phone can be used if not. Recommendations: Try to get most/all of the flight volume in (unobstructed) view of the camera Mount/position the camera somewhere stable so it does not move Handheld video will be less pleasant to watch If filming through the net, stick the camera lens just inside the net so the net is not obstructing the camera's view Ensure you have enough battery/memory capacity to record the full flight Check out some examples of flight videos we recorded in the Flight tests section of the Weekly Updates & Tests page.","title":"External Video"},{"location":"flying/flight_reporting/#flight-notes","text":"It is recommended to jot down some notes about the flight immediately after the flight and especially during analysis of the flight data if you are debugging some issues. e.g: These sample notes were taken while we were performing battery life/flight duration tests, hence the focus on power consumption. The flight notes were also particularly useful for us when tuning the drone's PID controllers (see Multicopter PID Tuning Guide ) so that we could quickly & easily correspond PID parameter changes made with the resulting performance changes in the drone's flight. Check out some more examples of flight notes we took in the Flight tests section of the Weekly Updates & Tests page.","title":"Flight Notes"},{"location":"flying/flight_safety/","text":"Flight Safety It is always important to follow these rules!","title":"Flight Safety"},{"location":"flying/flight_safety/#flight-safety","text":"It is always important to follow these rules!","title":"Flight Safety"},{"location":"parts/cabling/","text":"Cabling Summary The PX4 FMU v5 requires some custom cables to interact with the sensors. Here you will find the necessary information to replicate such cables. PMW3901 cable The PX4 has 1 SPI port with the following pinout.Pixhawk SPI connector is JST-GH 7 pins. Teraranger EVO mini cable From the official documentation, you require to wire the Teraranger like this . The PX4 FMU v5 has two I2C ports, you are interested in the port A. Pixhawk I2C connector is JST-GH 4 pins. ESP8266 cable The PX4 FMU v5 has 2 telemetry ports. Telemetry 2 is the port to connect the ESP8266. The connector is a JST-GH 6 pins. Arm button cable The PX4 FMU v5 has 1 GPS port, this port has the pins needed for the arm button. The connector is a JST-GH 10 pins. Debug IO/FMU cable The PX4 FMU v5 has 2 debug ports, one for I/O and another for the FMU. The connector is a male JST SM06B 6 pins. The one we use is the FMU debug port. PX4 power + sensor connector The PX4 FMU v5 has 2 power ports, the one we are interested in is POWER 1 port. The connector is a JST-GH 6 pins. This cable s different from the previous as it connecets different parts of the system. One end requires a DF13 male connector to interact with the Power Module current and voltage sensor readings.","title":"Cabling"},{"location":"parts/cabling/#cabling-summary","text":"The PX4 FMU v5 requires some custom cables to interact with the sensors. Here you will find the necessary information to replicate such cables.","title":"Cabling Summary"},{"location":"parts/cabling/#pmw3901-cable","text":"The PX4 has 1 SPI port with the following pinout.Pixhawk SPI connector is JST-GH 7 pins.","title":"PMW3901 cable"},{"location":"parts/cabling/#teraranger-evo-mini-cable","text":"From the official documentation, you require to wire the Teraranger like this . The PX4 FMU v5 has two I2C ports, you are interested in the port A. Pixhawk I2C connector is JST-GH 4 pins.","title":"Teraranger EVO mini cable"},{"location":"parts/cabling/#esp8266-cable","text":"The PX4 FMU v5 has 2 telemetry ports. Telemetry 2 is the port to connect the ESP8266. The connector is a JST-GH 6 pins.","title":"ESP8266 cable"},{"location":"parts/cabling/#arm-button-cable","text":"The PX4 FMU v5 has 1 GPS port, this port has the pins needed for the arm button. The connector is a JST-GH 10 pins.","title":"Arm button cable"},{"location":"parts/cabling/#debug-iofmu-cable","text":"The PX4 FMU v5 has 2 debug ports, one for I/O and another for the FMU. The connector is a male JST SM06B 6 pins. The one we use is the FMU debug port.","title":"Debug IO/FMU cable"},{"location":"parts/cabling/#px4-power-sensor-connector","text":"The PX4 FMU v5 has 2 power ports, the one we are interested in is POWER 1 port. The connector is a JST-GH 6 pins. This cable s different from the previous as it connecets different parts of the system. One end requires a DF13 male connector to interact with the Power Module current and voltage sensor readings.","title":"PX4 power + sensor connector"},{"location":"parts/fasteners/","text":"Fasteners Summary There are some specific fastener sizes that will be required for assembly of this quadrotor as designed. In general, it is recommended to have a decent stock of fasteners (screws, washers, & nuts) of various size & length, especially M3, M4, & M5. For some screws, the head type (e,g phillips, torx, etc.) may be noted, but following these recommendations is not necessary. Also, the lengths are what worked for us, but should be viewed as recommendations and not strict requirements. You should purchase a pack of various screw sizes / lengths and use what works best for you. It is also recommended to have various sizes of zipties on hand. The zipties are especially important to have in stock as they may break during flights/collisions or will need to be cut & replaced when working on some of the drone's components. Finally, you should have a roll of double sided industrial foam tape or a few sheets of double sided industrial pads. These are used to secure some of the smaller components and are used to aid in securing some larger components. Required Fasteners Fastener Description Quantity w/ Nut? Relevant Component Function M3 x 14mm screws 16 No Motors Secure motors to Q380 arms Small zip ties 1 8 N/A ESCs Secure ESCs to Q380 arms Small zip ties 1 ~ 5 N/A Low Level Sensors Secure various components Double sided foam pads (industrial) ~ 10 N/A Low Level Sensors Secure various components M3 x 10mm screws (w/ washers) 3 Yes Nuc Mount Secure to Q380 top plate M3 x 32mm screws 4 Yes Nuc Mount Secure top / NUC / bottom together M3 x 12mm screws 4 Yes Boost Converter Mount Secure to NUC Mount Large zip ties 2 4 N/A Landing Gear Support connection to Q380 arm M2.5 x 12mm phillips screws 3 8 No Battery Frame Adapter Secure adapter to Q380 arm M3 x 10mm torx screws 8 Yes Battery Frame Adapter Secure adapter to Q380 top plate 0.25\" Camera Screws 3 No RealSense Cameras Secure cameras to mounts Notes Size may vary, but ~ 100mm x 2.5mm worked well Size may vary, but ~ 200mm x 4.6mm is recommended Slightly shorter OK","title":"Fasteners"},{"location":"parts/fasteners/#fasteners-summary","text":"There are some specific fastener sizes that will be required for assembly of this quadrotor as designed. In general, it is recommended to have a decent stock of fasteners (screws, washers, & nuts) of various size & length, especially M3, M4, & M5. For some screws, the head type (e,g phillips, torx, etc.) may be noted, but following these recommendations is not necessary. Also, the lengths are what worked for us, but should be viewed as recommendations and not strict requirements. You should purchase a pack of various screw sizes / lengths and use what works best for you. It is also recommended to have various sizes of zipties on hand. The zipties are especially important to have in stock as they may break during flights/collisions or will need to be cut & replaced when working on some of the drone's components. Finally, you should have a roll of double sided industrial foam tape or a few sheets of double sided industrial pads. These are used to secure some of the smaller components and are used to aid in securing some larger components.","title":"Fasteners Summary"},{"location":"parts/fasteners/#required-fasteners","text":"Fastener Description Quantity w/ Nut? Relevant Component Function M3 x 14mm screws 16 No Motors Secure motors to Q380 arms Small zip ties 1 8 N/A ESCs Secure ESCs to Q380 arms Small zip ties 1 ~ 5 N/A Low Level Sensors Secure various components Double sided foam pads (industrial) ~ 10 N/A Low Level Sensors Secure various components M3 x 10mm screws (w/ washers) 3 Yes Nuc Mount Secure to Q380 top plate M3 x 32mm screws 4 Yes Nuc Mount Secure top / NUC / bottom together M3 x 12mm screws 4 Yes Boost Converter Mount Secure to NUC Mount Large zip ties 2 4 N/A Landing Gear Support connection to Q380 arm M2.5 x 12mm phillips screws 3 8 No Battery Frame Adapter Secure adapter to Q380 arm M3 x 10mm torx screws 8 Yes Battery Frame Adapter Secure adapter to Q380 top plate 0.25\" Camera Screws 3 No RealSense Cameras Secure cameras to mounts","title":"Required Fasteners"},{"location":"parts/fasteners/#notes","text":"Size may vary, but ~ 100mm x 2.5mm worked well Size may vary, but ~ 200mm x 4.6mm is recommended Slightly shorter OK","title":"Notes"},{"location":"parts/printed_parts/","text":"3D Printed Parts Summary The following 3D printed parts are required for constructing the drone as designed. Note that all links include the required .stl files for 3D printing, while some links will include .ipt (AutoDesk Inventor) files that can be improved / customized. If there are any access issues please contact Kyle Coble at kwc57@cornell.edu . Link to all CAD file folders System Part Type Part Name Quantity CAD Link Body Large Battery Adapter Large Battery Adapter 4 Large Battery Adapter Landing Gear Landing Gear Assembly Landing Gear Assembly 4 1 Landing Gear Assembly Flight Systems Sensor Plate Low Level Sensor Plate 1 Low Level Sensor Plate Companion Computer NUC Mount NUC Mount Assembly 1 NUC Mount Assembly Perception L515 Camera Mount L515 Camera Mount 1 L515 Camera Mount Power Supply Boost Converter Mount Boost Converter Mount 1 Boost Converter Mount Power Supply Power Connector Holder Power Connector Holder 1 Power Connector Holder Propulsion Propeller Guards Propeller Guards - 8045 props 4 Propeller Guards Notes Do not print 4 each of the landing gear components. See Landing Gear Assembly - 3D Printing for specific print quantities of each component.","title":"Printed Parts"},{"location":"parts/printed_parts/#3d-printed-parts-summary","text":"The following 3D printed parts are required for constructing the drone as designed. Note that all links include the required .stl files for 3D printing, while some links will include .ipt (AutoDesk Inventor) files that can be improved / customized. If there are any access issues please contact Kyle Coble at kwc57@cornell.edu . Link to all CAD file folders System Part Type Part Name Quantity CAD Link Body Large Battery Adapter Large Battery Adapter 4 Large Battery Adapter Landing Gear Landing Gear Assembly Landing Gear Assembly 4 1 Landing Gear Assembly Flight Systems Sensor Plate Low Level Sensor Plate 1 Low Level Sensor Plate Companion Computer NUC Mount NUC Mount Assembly 1 NUC Mount Assembly Perception L515 Camera Mount L515 Camera Mount 1 L515 Camera Mount Power Supply Boost Converter Mount Boost Converter Mount 1 Boost Converter Mount Power Supply Power Connector Holder Power Connector Holder 1 Power Connector Holder Propulsion Propeller Guards Propeller Guards - 8045 props 4 Propeller Guards","title":"3D Printed Parts Summary"},{"location":"parts/printed_parts/#notes","text":"Do not print 4 each of the landing gear components. See Landing Gear Assembly - 3D Printing for specific print quantities of each component.","title":"Notes"},{"location":"parts/purchased_parts/","text":"Purchased Parts Summary The table below includes prices, quantities, and links for items to be purchased for constructing a replica of the drone designed in this project. Disclaimers: Some links may expire, prices will vary (esp. with fluctuating currency exchange rates), and exact parts may become unavailable. These are not the only sources for purchasing these components. It is recommended to order duplicates (or more) of all parts as damage/failure of certain components is likely during flights and collisions. Certain parts are noted as a strong recommendation to order spares, but spares for all parts are worthwhile. Prices are presented in SEK, from January 2021. Prices do not include taxes, shipping, import fees, etc. Body Part Name Part Description Unit Price Quantity Purchase Link Drone Frame 380mm Multirotor Quadcopter Frame 128 SEK 1 Q380 Drone Frame Landing Gear Magnets 8mm x 3mm (1.3 kg force) magnets 18 SEK 24+ 1 NdFeB magnets Notes 3 per leg are installed (12 total). It is worth ordering a full extra set as they are fragile. Flight Systems Part Name Part Description Unit Price Quantity Purchase Link Pixhawk 4 (FCU) Pixhawk 4 (plastic) & PM07\u200b (SKU20045) 1,391 SEK 1 Pixhawk 4 FCU Vibration Isolator Pixhawk 4 Vibration Damping Mount 74 SEK 1 PX4 Mount FCU Arming Switch PX4 Arming Switch 25 SEK 1 Arming Switch Range Finder TeraRanger Evo Mini (I2C / UART) 272 SEK 1 TeraRanger Evo Mini Optical Flow Sensor PWM3901 Optical Flow Sensor 174 SEK 1 PWM3901 SPI ESP8266 Wifi Module Adafruit Feather HUZZAH with ESP8266 249 SEK 1 HUZZAH with ESP8266 Radio Receiver FrSky D4R-II 4ch Receiver 1 205 SEK 1 FrSky D4R-II Radio Controller FrSky Taranis X9D Plus 1,787 SEK 1 FrSky Taranis X9D Plus Notes May need to be updated to a newer FrSky model if stock can't be found. Peripherals Part Name Part Description Unit Price Quantity Purchase Link Intel NUC Intel\u00ae NUC 8 Pro Board - NUC8v7PNB 6,950 SEK 1 Intel NUC 8 RealSense Lidar Camera RealSense L515 2,866 SEK 1 RealSense L515 RealSense Stereo Camera RealSense D435i 1,638 SEK 2 RealSense D345i Camera Screws 0.25\" Camera Screw 17 SEK 3 1/4\" Camera Screw Power Supply Part Name Part Description Unit Price Quantity Purchase Link Battery Voltage Alarm In Line Battery Voltage Alarm 84 SEK 1 Voltage Alarm Hot Swap Board Y-PWR (5-30V, max. 2x 10A) 201 SEK 1 Y-PWR Hot Swap Board LiPo Battery 4S - 8500mAh - 50C LiPo 1 1,340 SEK 1 4s 8500mAh - 50C - Gens Ace XT90 LiPo Boost Converter DC-DC 10-32V To 12-35V 150W Booster 59 SEK 1 Boost Converter PX4 power supply PX4 power supply (Buck Converter) 106 SEK 1 PX4 Power Module Capacitor 2200 uF Capacitor 4 SEK 1 2200mF Capacitor FCU Power Switch FCU Power / Reboot Switch 264 SEK (10 pieces) 1 Toggle Switch XT60 Connectors XT60 Connectors (10 pack) 2 57 SEK 1 XT60 pack XT90 Connectors XT90 Connectors (5 pack) 2 106 SEK 1 XT90 pack Notes It does not have to be this exact battery, but it is important that: The form factor is similar, esp. height and width (47mm x 42mm) The battery is a 4 Cell (4S) LiPo The discharge (C) rating can sustain ~100 A discharge Only 1 each of XT60 & XT90 connectors needed, but they are usually purchased in a pack. Propulsion Part Name Part Description Unit Price Quantity Purchase Link Motors SunnySky X2216 V3 - 1250kV - short shaft 187 SEK 6+ 1 SunnySky V3 X2216 Motors 30A, 2S-4S ESC's 30A, 2S-4S Multirotor ESC's 86 SEK 12+ 2,3 30A, 4S ESC's Propellers 8045 Propellers - 2x CW & 2x CCW 32 SEK 10+ 4 8045 CW & CCW Propellers Propeller Adapters 5mm (M5) prop adapters kit - 2x CW & 2x CCW 71 SEK 1 M5 Prop Adapters Propeller Guards Propeller Guards - 8045 props 30.21 SEK 8+ 5 8 - 9 inch propeller guard (2 pcs) Bullet Connectors Bullet Connectors - (2mm/3.5mm/4mm) 151 SEK 1 Pack Bullet Connector Pack Notes Purchase at least 5 motors in case one is damaged or fails (somewhat likely). These are only a representative example of 30A ESC's. Choose a quality product with the same specs as low quality ESC's tend to fail. Purchase at least 12 ESC's in case some fail / burn up (very likely). Technically the recommended motors can draw > 30 A, but shouldn't under the design conditions. Additionally, 40 A ESC's are excessively heavy and more expensive. Purchase around 10 packs of blades (4 per pack) as any collisions may result in damaged propellers that require replacement. Purchase at least 2 sets of propeller guards as any extreme collisions may result in damaged guards that require replacement. Cabling See details in Cabling Summary . Fasteners See details in Fasteners Summary . Note that specific purchase links are not provided since these are very general components.","title":"Purchased Parts"},{"location":"parts/purchased_parts/#purchased-parts-summary","text":"The table below includes prices, quantities, and links for items to be purchased for constructing a replica of the drone designed in this project. Disclaimers: Some links may expire, prices will vary (esp. with fluctuating currency exchange rates), and exact parts may become unavailable. These are not the only sources for purchasing these components. It is recommended to order duplicates (or more) of all parts as damage/failure of certain components is likely during flights and collisions. Certain parts are noted as a strong recommendation to order spares, but spares for all parts are worthwhile. Prices are presented in SEK, from January 2021. Prices do not include taxes, shipping, import fees, etc.","title":"Purchased Parts Summary"},{"location":"parts/purchased_parts/#body","text":"Part Name Part Description Unit Price Quantity Purchase Link Drone Frame 380mm Multirotor Quadcopter Frame 128 SEK 1 Q380 Drone Frame Landing Gear Magnets 8mm x 3mm (1.3 kg force) magnets 18 SEK 24+ 1 NdFeB magnets","title":"Body"},{"location":"parts/purchased_parts/#notes","text":"3 per leg are installed (12 total). It is worth ordering a full extra set as they are fragile.","title":"Notes"},{"location":"parts/purchased_parts/#flight-systems","text":"Part Name Part Description Unit Price Quantity Purchase Link Pixhawk 4 (FCU) Pixhawk 4 (plastic) & PM07\u200b (SKU20045) 1,391 SEK 1 Pixhawk 4 FCU Vibration Isolator Pixhawk 4 Vibration Damping Mount 74 SEK 1 PX4 Mount FCU Arming Switch PX4 Arming Switch 25 SEK 1 Arming Switch Range Finder TeraRanger Evo Mini (I2C / UART) 272 SEK 1 TeraRanger Evo Mini Optical Flow Sensor PWM3901 Optical Flow Sensor 174 SEK 1 PWM3901 SPI ESP8266 Wifi Module Adafruit Feather HUZZAH with ESP8266 249 SEK 1 HUZZAH with ESP8266 Radio Receiver FrSky D4R-II 4ch Receiver 1 205 SEK 1 FrSky D4R-II Radio Controller FrSky Taranis X9D Plus 1,787 SEK 1 FrSky Taranis X9D Plus","title":"Flight Systems"},{"location":"parts/purchased_parts/#notes_1","text":"May need to be updated to a newer FrSky model if stock can't be found.","title":"Notes"},{"location":"parts/purchased_parts/#peripherals","text":"Part Name Part Description Unit Price Quantity Purchase Link Intel NUC Intel\u00ae NUC 8 Pro Board - NUC8v7PNB 6,950 SEK 1 Intel NUC 8 RealSense Lidar Camera RealSense L515 2,866 SEK 1 RealSense L515 RealSense Stereo Camera RealSense D435i 1,638 SEK 2 RealSense D345i Camera Screws 0.25\" Camera Screw 17 SEK 3 1/4\" Camera Screw","title":"Peripherals"},{"location":"parts/purchased_parts/#power-supply","text":"Part Name Part Description Unit Price Quantity Purchase Link Battery Voltage Alarm In Line Battery Voltage Alarm 84 SEK 1 Voltage Alarm Hot Swap Board Y-PWR (5-30V, max. 2x 10A) 201 SEK 1 Y-PWR Hot Swap Board LiPo Battery 4S - 8500mAh - 50C LiPo 1 1,340 SEK 1 4s 8500mAh - 50C - Gens Ace XT90 LiPo Boost Converter DC-DC 10-32V To 12-35V 150W Booster 59 SEK 1 Boost Converter PX4 power supply PX4 power supply (Buck Converter) 106 SEK 1 PX4 Power Module Capacitor 2200 uF Capacitor 4 SEK 1 2200mF Capacitor FCU Power Switch FCU Power / Reboot Switch 264 SEK (10 pieces) 1 Toggle Switch XT60 Connectors XT60 Connectors (10 pack) 2 57 SEK 1 XT60 pack XT90 Connectors XT90 Connectors (5 pack) 2 106 SEK 1 XT90 pack","title":"Power Supply"},{"location":"parts/purchased_parts/#notes_2","text":"It does not have to be this exact battery, but it is important that: The form factor is similar, esp. height and width (47mm x 42mm) The battery is a 4 Cell (4S) LiPo The discharge (C) rating can sustain ~100 A discharge Only 1 each of XT60 & XT90 connectors needed, but they are usually purchased in a pack.","title":"Notes"},{"location":"parts/purchased_parts/#propulsion","text":"Part Name Part Description Unit Price Quantity Purchase Link Motors SunnySky X2216 V3 - 1250kV - short shaft 187 SEK 6+ 1 SunnySky V3 X2216 Motors 30A, 2S-4S ESC's 30A, 2S-4S Multirotor ESC's 86 SEK 12+ 2,3 30A, 4S ESC's Propellers 8045 Propellers - 2x CW & 2x CCW 32 SEK 10+ 4 8045 CW & CCW Propellers Propeller Adapters 5mm (M5) prop adapters kit - 2x CW & 2x CCW 71 SEK 1 M5 Prop Adapters Propeller Guards Propeller Guards - 8045 props 30.21 SEK 8+ 5 8 - 9 inch propeller guard (2 pcs) Bullet Connectors Bullet Connectors - (2mm/3.5mm/4mm) 151 SEK 1 Pack Bullet Connector Pack","title":"Propulsion"},{"location":"parts/purchased_parts/#notes_3","text":"Purchase at least 5 motors in case one is damaged or fails (somewhat likely). These are only a representative example of 30A ESC's. Choose a quality product with the same specs as low quality ESC's tend to fail. Purchase at least 12 ESC's in case some fail / burn up (very likely). Technically the recommended motors can draw > 30 A, but shouldn't under the design conditions. Additionally, 40 A ESC's are excessively heavy and more expensive. Purchase around 10 packs of blades (4 per pack) as any collisions may result in damaged propellers that require replacement. Purchase at least 2 sets of propeller guards as any extreme collisions may result in damaged guards that require replacement.","title":"Notes"},{"location":"parts/purchased_parts/#cabling","text":"See details in Cabling Summary .","title":"Cabling"},{"location":"parts/purchased_parts/#fasteners","text":"See details in Fasteners Summary . Note that specific purchase links are not provided since these are very general components.","title":"Fasteners"},{"location":"parts/summary/","text":"Parts Summary The drone assembly requires a combination of purchased parts, custom designed 3D printed parts, and custom made cabling. This page details all necessary parts and how they can be obtained. If you are assembling this drone for the KTH CAS-UAV lab, you should check all inventory prior to making any purchase orders as some parts are likely already be on hand. Parts Summary by System Body / Landing Gear System Part Name Part Description Category Body Drone Frame 380mm Multirotor Quadcopter Frame Purchased Body Large Battery Adapter Large Battery Adapter 3D Printed Landing Gear Landing Gear Assembly Landing Gear Assembly 3D Printed Landing Gear Landing Gear Magnets 8mm x 3mm (1.3 kg force) magnets Purchased Flight Systems System Part Name Part Description Category Flight Systems Flight Control Unit (FCU) PixHawk 4 Purchased Flight Systems FCU Vibration Isolator Pixhawk 4 Vibration Damping Mount Purchased Flight Systems FCU Arming Switch PX4 Arming Switch Purchased Flight Systems Range Finder TeraRanger Evo Mini Purchased Flight Systems Optical Flow Sensor PWM3901 Optical Flow Sensor Purchased Flight Systems ESP8266 Wifi Module Adafruit Feather HUZZAH with ESP8266 Purchased Flight Systems Radio Receiver FrSky D4R-II 4ch Receiver Purchased Flight Systems Radio Controller FrSky Taranis X9D Plus 1 Purchased Flight Systems Sensor Plate Low Level Sensor Plate 3D Printed Notes Can be shared among multiple UAVs. Peripherals System Part Name Part Description Category Companion Computer Intel NUC 1 Intel\u00ae NUC 8 Pro Board - NUC8v7PNB Purchased Companion Computer NUC Mount 2 NUC Mount Assembly 3D Printed Perception RealSense Lidar Camera RealSense L515 Purchased Perception L515 Camera Mount L515 Camera Mount 3D Printed Perception RealSense Stereo Camera RealSense D435i Purchased Perception Camera Screws 0.25\" Camera Screw Purchased Notes It is recommended to purchase the up-to-date, highest quality NUC model. The 3D printed NUC mount CAD file may need modifications if the footprint changes with newer models. The mount was designed for a NUC8BEB model. Power Supply System Part Name Part Description Category Power Supply Battery Voltage Alarm In Line Battery Voltage Alarm Purchased Power Supply Hot Swap Board Y-PWR (5-30V, max. 2x 10A) Purchased Power Supply LiPo Battery 4S - 8500mAh - 50C LiPo Purchased Power Supply Boost Converter DC-DC 10-32V To 12-35V 150W Booster Purchased Power Supply Boost Converter Mount Boost Converter Mount 3D Printed Power Supply PX4 power supply PX4 power supply (Buck Converter) Purchased Power Supply Capacitor 2,00 uF Capacitor Purchased Power Supply Power Connector Holder Power Connector Holder 3D Printed Power Supply FCU Power Switch FCU Power / Reboot Switch Purchased Power Supply XT60 Connectors XT60 Connectors Purchased Power Supply XT90 Connectors XT90 Connectors Purchased Propulsion System Part Name Part Description Category Propulsion Motors SunnySky X2216 V3 - 1250kV - short shaft Purchased Propulsion 30A, 2S-4S ESC's 30A, 2S-4S Multirotor ESC's Purchased Propulsion Propellers 8045 Propellers - 2x CW & 2x CCW Purchased Propulsion Propeller Adapters 5mm (M5) prop adapters - 2x CW & 2x CCW Purchased Propulsion Propeller Guards Propeller Guards - 8045 props Either Propulsion Bullet Connectors Bullet Connectors - (2mm/3.5mm/4mm) Purchased Notes There are two options for propeller guards. The purchased guards have proven to withstand more damage during collisions. Cabling See details in Cabling Summary . Fasteners See details in Fasteners Summary .","title":"Summary"},{"location":"parts/summary/#parts-summary","text":"The drone assembly requires a combination of purchased parts, custom designed 3D printed parts, and custom made cabling. This page details all necessary parts and how they can be obtained. If you are assembling this drone for the KTH CAS-UAV lab, you should check all inventory prior to making any purchase orders as some parts are likely already be on hand.","title":"Parts Summary"},{"location":"parts/summary/#parts-summary-by-system","text":"","title":"Parts Summary by System"},{"location":"parts/summary/#body-landing-gear","text":"System Part Name Part Description Category Body Drone Frame 380mm Multirotor Quadcopter Frame Purchased Body Large Battery Adapter Large Battery Adapter 3D Printed Landing Gear Landing Gear Assembly Landing Gear Assembly 3D Printed Landing Gear Landing Gear Magnets 8mm x 3mm (1.3 kg force) magnets Purchased","title":"Body / Landing Gear"},{"location":"parts/summary/#flight-systems","text":"System Part Name Part Description Category Flight Systems Flight Control Unit (FCU) PixHawk 4 Purchased Flight Systems FCU Vibration Isolator Pixhawk 4 Vibration Damping Mount Purchased Flight Systems FCU Arming Switch PX4 Arming Switch Purchased Flight Systems Range Finder TeraRanger Evo Mini Purchased Flight Systems Optical Flow Sensor PWM3901 Optical Flow Sensor Purchased Flight Systems ESP8266 Wifi Module Adafruit Feather HUZZAH with ESP8266 Purchased Flight Systems Radio Receiver FrSky D4R-II 4ch Receiver Purchased Flight Systems Radio Controller FrSky Taranis X9D Plus 1 Purchased Flight Systems Sensor Plate Low Level Sensor Plate 3D Printed","title":"Flight Systems"},{"location":"parts/summary/#notes","text":"Can be shared among multiple UAVs.","title":"Notes"},{"location":"parts/summary/#peripherals","text":"System Part Name Part Description Category Companion Computer Intel NUC 1 Intel\u00ae NUC 8 Pro Board - NUC8v7PNB Purchased Companion Computer NUC Mount 2 NUC Mount Assembly 3D Printed Perception RealSense Lidar Camera RealSense L515 Purchased Perception L515 Camera Mount L515 Camera Mount 3D Printed Perception RealSense Stereo Camera RealSense D435i Purchased Perception Camera Screws 0.25\" Camera Screw Purchased","title":"Peripherals"},{"location":"parts/summary/#notes_1","text":"It is recommended to purchase the up-to-date, highest quality NUC model. The 3D printed NUC mount CAD file may need modifications if the footprint changes with newer models. The mount was designed for a NUC8BEB model.","title":"Notes"},{"location":"parts/summary/#power-supply","text":"System Part Name Part Description Category Power Supply Battery Voltage Alarm In Line Battery Voltage Alarm Purchased Power Supply Hot Swap Board Y-PWR (5-30V, max. 2x 10A) Purchased Power Supply LiPo Battery 4S - 8500mAh - 50C LiPo Purchased Power Supply Boost Converter DC-DC 10-32V To 12-35V 150W Booster Purchased Power Supply Boost Converter Mount Boost Converter Mount 3D Printed Power Supply PX4 power supply PX4 power supply (Buck Converter) Purchased Power Supply Capacitor 2,00 uF Capacitor Purchased Power Supply Power Connector Holder Power Connector Holder 3D Printed Power Supply FCU Power Switch FCU Power / Reboot Switch Purchased Power Supply XT60 Connectors XT60 Connectors Purchased Power Supply XT90 Connectors XT90 Connectors Purchased","title":"Power Supply"},{"location":"parts/summary/#propulsion","text":"System Part Name Part Description Category Propulsion Motors SunnySky X2216 V3 - 1250kV - short shaft Purchased Propulsion 30A, 2S-4S ESC's 30A, 2S-4S Multirotor ESC's Purchased Propulsion Propellers 8045 Propellers - 2x CW & 2x CCW Purchased Propulsion Propeller Adapters 5mm (M5) prop adapters - 2x CW & 2x CCW Purchased Propulsion Propeller Guards Propeller Guards - 8045 props Either Propulsion Bullet Connectors Bullet Connectors - (2mm/3.5mm/4mm) Purchased","title":"Propulsion"},{"location":"parts/summary/#notes_2","text":"There are two options for propeller guards. The purchased guards have proven to withstand more damage during collisions.","title":"Notes"},{"location":"parts/summary/#cabling","text":"See details in Cabling Summary .","title":"Cabling"},{"location":"parts/summary/#fasteners","text":"See details in Fasteners Summary .","title":"Fasteners"},{"location":"setup/flight_modes/","text":"Flight Modes Flight Modes Setup We recommend for you to start off by flying with two flight modes: Manual Mode Position Hold Mode until you are prepared to fly with Autonomous Flight Mode (as a 3rd flight mode). The PX4 Flight Modes Overview , and the referenced links found on that page (e.g. Flight Mode Configuration ), provide ample detail on the usage and setup of these modes in QGroundControl and on the radio remote control, specifcally the FrSky Taranis X9D. We found the SA switch on the FrSky Taranis X9D radio remote control to be a convenient switch to use for switching between flight modes as it is well located and it should allow for switching between three Flight Mode settings.","title":"Flight Modes"},{"location":"setup/flight_modes/#flight-modes","text":"","title":"Flight Modes"},{"location":"setup/flight_modes/#flight-modes-setup","text":"We recommend for you to start off by flying with two flight modes: Manual Mode Position Hold Mode until you are prepared to fly with Autonomous Flight Mode (as a 3rd flight mode). The PX4 Flight Modes Overview , and the referenced links found on that page (e.g. Flight Mode Configuration ), provide ample detail on the usage and setup of these modes in QGroundControl and on the radio remote control, specifcally the FrSky Taranis X9D. We found the SA switch on the FrSky Taranis X9D radio remote control to be a convenient switch to use for switching between flight modes as it is well located and it should allow for switching between three Flight Mode settings.","title":"Flight Modes Setup"},{"location":"setup/install_software/","text":"PX4 Software installation and build The software version we are using for the current drone is based on release 1.11.2. You can clone the repo here . Make sure to update your system before. $ sudo apt-get update && upgrade Install ninja build: $ sudo apt-get install -y ninja-build In the folder of preference, run the following : $ git clone https://github.com/alsarm/PX4-Autopilot.git Navigate inside the repo into the 'Tools' folder: $ cd PX4-Autopilot/Tools/setup Execute the 'ubuntu.sh' script, this will take some minutes to complete: $ ./ubuntu.sh If installation fails, you may need to check the Ubuntu Software tab in Software & Updates to verify that you have Community-maintained source checked. To compile the software, you will need to have an ARM GNU compiler version <9.3.1. Version 7.3.1 works pretty well. The setup script from previous step will install the compiler at ~/opt/gcc-arm-none-eabi-9-2020-q2-update The easiest way to use version 7.3.1 is to download the corresponding files from here . Uncompress the .tar file and move it to '~/opt/' , then change the name of the folder to 'gcc-arm-none-eabi-9-2020-q2-update' (just remember to back up the previous folder). Other methods to setup the compiler could be through symbolic links. Once the script finishes, you can check everything works by compiling the software. But before, you need to change to the 'release/1.11' branch: ~PX4-Autopilot$git checkout release/1.11 Branch 'release/1.11' set up to track remote branch 'release/1.11' from 'origin'. Switched to a new branch 'release/1.11' ~PX4-Autopilot$make px4_fmu-v5_default Alternatively you can directly upload to the PX4 by adding the option 'upload' ~PX4-Autopilot$make px4_fmu-v5_default upload If you are prompted regarding some files not being in the recommended version, type 'y' and continue with the build. QGroundControl Install To install QGroundControl, please refer to the very comprehensive guide provided by them Debugging FMU It may be useful to debug the PX4 via the NSH terminal. For that reason, you can use a FTDI cable to connect to the debug port, as described here . You can check how to connect the FTDI cable to the PX4 here .","title":"Install the software."},{"location":"setup/install_software/#px4-software-installation-and-build","text":"The software version we are using for the current drone is based on release 1.11.2. You can clone the repo here . Make sure to update your system before. $ sudo apt-get update && upgrade Install ninja build: $ sudo apt-get install -y ninja-build In the folder of preference, run the following : $ git clone https://github.com/alsarm/PX4-Autopilot.git Navigate inside the repo into the 'Tools' folder: $ cd PX4-Autopilot/Tools/setup Execute the 'ubuntu.sh' script, this will take some minutes to complete: $ ./ubuntu.sh If installation fails, you may need to check the Ubuntu Software tab in Software & Updates to verify that you have Community-maintained source checked. To compile the software, you will need to have an ARM GNU compiler version <9.3.1. Version 7.3.1 works pretty well. The setup script from previous step will install the compiler at ~/opt/gcc-arm-none-eabi-9-2020-q2-update The easiest way to use version 7.3.1 is to download the corresponding files from here . Uncompress the .tar file and move it to '~/opt/' , then change the name of the folder to 'gcc-arm-none-eabi-9-2020-q2-update' (just remember to back up the previous folder). Other methods to setup the compiler could be through symbolic links. Once the script finishes, you can check everything works by compiling the software. But before, you need to change to the 'release/1.11' branch: ~PX4-Autopilot$git checkout release/1.11 Branch 'release/1.11' set up to track remote branch 'release/1.11' from 'origin'. Switched to a new branch 'release/1.11' ~PX4-Autopilot$make px4_fmu-v5_default Alternatively you can directly upload to the PX4 by adding the option 'upload' ~PX4-Autopilot$make px4_fmu-v5_default upload If you are prompted regarding some files not being in the recommended version, type 'y' and continue with the build.","title":"PX4 Software installation and build"},{"location":"setup/install_software/#qgroundcontrol-install","text":"To install QGroundControl, please refer to the very comprehensive guide provided by them","title":"QGroundControl Install"},{"location":"setup/install_software/#debugging-fmu","text":"It may be useful to debug the PX4 via the NSH terminal. For that reason, you can use a FTDI cable to connect to the debug port, as described here . You can check how to connect the FTDI cable to the PX4 here .","title":"Debugging FMU"},{"location":"setup/mavros_setup/","text":"MAVROS Setup MAVROS Links MAVROS usage is well documented and your priority should be to follow the official links / resources, especially as functionalities are updated. PX4 MAVROS MAVROS Github MAVROS ROS Wiki Initial Installation On the drone's companion computer (the NUC), install the ROS Noetic version of MAVROS, per the Binary installation instructions at MAVROS Binary Installation . At the time of writing this, the installation instructions are for ROS Kinetic, but the NUC should be running Ubuntu 20.04, so instead install the Noetic version with: sudo apt-get install ros-noetic-mavros ros-noetic-mavros-extras and follow the instructions for dependency installation. Test the Installation With the Pixhawk connected to the NUC, you should be able to test for successful installation by launching: roslaunch mavros px4.launch fcu_url:=/dev/ttyUSB0:57600 Or, if reading from the microUSB port on the Pixhawk: roslaunch mavros px4.launch fcu_url:=/dev/ttyACM0:57600 And listen to some relevant topics, e.g.: rostopic echo /mavros/local_position/pose rostopic echo /mavros/distance_sensor/hrlv_ez4_pub rostopic echo /mavros/px4flow/raw/optical_flow_rad FTDI vs USB NOTE: Only follow this section if attempting to use the FTDI cable to connect the Pixhawk to the NUC. See PX4 Companion Computer Hardware Setup . If flying with usb, change the CBRK_USB_CHK parameter to 197848 and you can use the microUSB port on the Pixhawk 4 to connect to the NUC. When using the FTDI cable, it was necessary to change the rates at which messages come in. These are all added to /ROMFS/px4fmu_common/init.d-posix/rcS in our version of PX4 firmware , so it runs on Pixhawk boot. If you are not running our version, you will need to change them in QGroundControl every time the Pixhawk boots or make changes like those we have made to /ROMFS/px4fmu_common/init.d-posix/rcS . The commands to change these message rates include, but are not limited to: mavlink stream -r 500 -s POSITION_TARGET_LOCAL_NED -d /dev/ttyS1 mavlink stream -r 500 -s LOCAL_POSITION_NED -d /dev/ttyS1 mavlink stream -r 500 -s GLOBAL_POSITION_INT -d /dev/ttyS1 mavlink stream -r 500 -s ATTITUDE -d /dev/ttyS1 mavlink stream -r 500 -s ATTITUDE_QUATERNION -d /dev/ttyS1 mavlink stream -r 500 -s ATTITUDE_TARGET -d /dev/ttyS1 mavlink stream -r 500 -s SERVO_OUTPUT_RAW_0 -d /dev/ttyS1 mavlink stream -r 500 -s RC_CHANNELS -d /dev/ttyS1 mavlink stream -r 500 -s OPTICAL_FLOW_RAD -d /dev/ttyS1 mavlink stream -r 500 -s DISTANCE_SENSOR -d /dev/ttyS1 RPL MAVROS Wrappers The ROS nodes required to run when flying are contained in dd2414_ros_companion_pc . Follow the instructions in the repo for setup. uav.launch is the launch file that you use. Set up a config folder like awesome_drone/ that uav.launch will call You shouldn't need to change much if anything in here distance_sensor_override.py is the 'fake mocap' that uses the distance sensor (TeraRanger) for z-axis estimates, but maps them through the MoCap position estimate topic This was created because of z-axis drift issues when using the distance sensor directly with the Pixhawk. This, we think, is because PX4 swaps to the barometer during periods of uncertainty when using the distance sensor and it doesn't do this when using 'external vision'","title":"MAVROS"},{"location":"setup/mavros_setup/#mavros-setup","text":"","title":"MAVROS Setup"},{"location":"setup/mavros_setup/#mavros-links","text":"MAVROS usage is well documented and your priority should be to follow the official links / resources, especially as functionalities are updated. PX4 MAVROS MAVROS Github MAVROS ROS Wiki","title":"MAVROS Links"},{"location":"setup/mavros_setup/#initial-installation","text":"On the drone's companion computer (the NUC), install the ROS Noetic version of MAVROS, per the Binary installation instructions at MAVROS Binary Installation . At the time of writing this, the installation instructions are for ROS Kinetic, but the NUC should be running Ubuntu 20.04, so instead install the Noetic version with: sudo apt-get install ros-noetic-mavros ros-noetic-mavros-extras and follow the instructions for dependency installation.","title":"Initial Installation"},{"location":"setup/mavros_setup/#test-the-installation","text":"With the Pixhawk connected to the NUC, you should be able to test for successful installation by launching: roslaunch mavros px4.launch fcu_url:=/dev/ttyUSB0:57600 Or, if reading from the microUSB port on the Pixhawk: roslaunch mavros px4.launch fcu_url:=/dev/ttyACM0:57600 And listen to some relevant topics, e.g.: rostopic echo /mavros/local_position/pose rostopic echo /mavros/distance_sensor/hrlv_ez4_pub rostopic echo /mavros/px4flow/raw/optical_flow_rad","title":"Test the Installation"},{"location":"setup/mavros_setup/#ftdi-vs-usb","text":"NOTE: Only follow this section if attempting to use the FTDI cable to connect the Pixhawk to the NUC. See PX4 Companion Computer Hardware Setup . If flying with usb, change the CBRK_USB_CHK parameter to 197848 and you can use the microUSB port on the Pixhawk 4 to connect to the NUC. When using the FTDI cable, it was necessary to change the rates at which messages come in. These are all added to /ROMFS/px4fmu_common/init.d-posix/rcS in our version of PX4 firmware , so it runs on Pixhawk boot. If you are not running our version, you will need to change them in QGroundControl every time the Pixhawk boots or make changes like those we have made to /ROMFS/px4fmu_common/init.d-posix/rcS . The commands to change these message rates include, but are not limited to: mavlink stream -r 500 -s POSITION_TARGET_LOCAL_NED -d /dev/ttyS1 mavlink stream -r 500 -s LOCAL_POSITION_NED -d /dev/ttyS1 mavlink stream -r 500 -s GLOBAL_POSITION_INT -d /dev/ttyS1 mavlink stream -r 500 -s ATTITUDE -d /dev/ttyS1 mavlink stream -r 500 -s ATTITUDE_QUATERNION -d /dev/ttyS1 mavlink stream -r 500 -s ATTITUDE_TARGET -d /dev/ttyS1 mavlink stream -r 500 -s SERVO_OUTPUT_RAW_0 -d /dev/ttyS1 mavlink stream -r 500 -s RC_CHANNELS -d /dev/ttyS1 mavlink stream -r 500 -s OPTICAL_FLOW_RAD -d /dev/ttyS1 mavlink stream -r 500 -s DISTANCE_SENSOR -d /dev/ttyS1","title":"FTDI vs USB"},{"location":"setup/mavros_setup/#rpl-mavros-wrappers","text":"The ROS nodes required to run when flying are contained in dd2414_ros_companion_pc . Follow the instructions in the repo for setup. uav.launch is the launch file that you use. Set up a config folder like awesome_drone/ that uav.launch will call You shouldn't need to change much if anything in here distance_sensor_override.py is the 'fake mocap' that uses the distance sensor (TeraRanger) for z-axis estimates, but maps them through the MoCap position estimate topic This was created because of z-axis drift issues when using the distance sensor directly with the Pixhawk. This, we think, is because PX4 swaps to the barometer during periods of uncertainty when using the distance sensor and it doesn't do this when using 'external vision'","title":"RPL MAVROS Wrappers"},{"location":"setup/mocap_setup/","text":"MoCap Setup Existing Setup Documentation These instructions have been taken directly from the KTH RPL CAS-UAV public pages, found at Setting up MOCAP for PixRacer Drones . [Jan '21] These instructions are specific to the motion capture (MoCap) system at the RPL Drone Lab. Safety first By personal experience, we now know that it is unwise to experiment with the drones without protective gear. In fact, it is probably unwise to do so with protective gear. The motors are racing motors and are way more powerful than normal multicopter motors. Therefore NEVER unsafe the drone unless it's in the protective cage, OR you are wearing protective gear and are alone in the workshop. This is to protect others (and yourself) from rogue drones. See 1. PWM_AUX_REV is a dangerous setting. Don't touch it. Components You should have: MOCAP system for 11 000 euros (cameras + Windows computer + Motive) Drone with or without on-board co-computer, but a co-computer is required to feed the MOCAP data into the flight control unit (FCU) MOCAP Calibrate the MOCAP system using the wand supplied with the MOCAP system. Just go wave the wand around with the calibration process started on the MOCAP computer. It will tell you when it's done. Calibrate the ground plane of the MOCAP system using the \"calibration square\", which is in fact not a square but a triangleish shape. Put it in the center of the capture volume, and align its axes. Know that the longer side is the Z axis, and the shorter side is the X axis. One of them will be negated, I forget which. I think it's the X axis. This is nothing to worry about because you can then flip the coordinate system in the ground plane settings, which you will have to anyway. Note that the rotations are accumulative; it's not a setting, but a transformation that you add. So if you rotate 90\u00b0 about X, and then again -- you've actually rotated 180\u00b0 about X in total. Double check the orientation of the FCU in QGroundControl. Just do it. It's under the \"Sensors\" heading. It is important to know that when you create a rigid body in the MOCAP system, the current orientation of that rigid body will be its \"unit orientation\", and so when you inevitably need to align the body frame to the frame of the MOCAP system, do it before creating the body (or recreate it afterwards.) DO NOT trust the axes labels in Motive. They are not indicative of which direction is positive for each dimension. It's a lot easier to do this alignment later, using RViz. Enable the Data Streaming in Motive, found somewhere in the menus. It will send its data to a multicast IP address, and that's great. Don't change it. NOTE that Motive sometimes sets the broadcasting device to \"loopback\", this effectively disables the MOCAP data broadcasting. We don't know why it keeps doing that. ROS So, on the co-computer, install and run mavros , and mavros_extras . Edit the configuration of mavros to include the mocap_pose_estimate plugin. Also install mocap_optitrack and run it. You should be able to see your rigid body in the TF tree (in RViz).","title":"MoCap System"},{"location":"setup/mocap_setup/#mocap-setup","text":"","title":"MoCap Setup"},{"location":"setup/mocap_setup/#existing-setup-documentation","text":"These instructions have been taken directly from the KTH RPL CAS-UAV public pages, found at Setting up MOCAP for PixRacer Drones . [Jan '21] These instructions are specific to the motion capture (MoCap) system at the RPL Drone Lab.","title":"Existing Setup Documentation"},{"location":"setup/mocap_setup/#safety-first","text":"By personal experience, we now know that it is unwise to experiment with the drones without protective gear. In fact, it is probably unwise to do so with protective gear. The motors are racing motors and are way more powerful than normal multicopter motors. Therefore NEVER unsafe the drone unless it's in the protective cage, OR you are wearing protective gear and are alone in the workshop. This is to protect others (and yourself) from rogue drones. See 1. PWM_AUX_REV is a dangerous setting. Don't touch it.","title":"Safety first"},{"location":"setup/mocap_setup/#components","text":"You should have: MOCAP system for 11 000 euros (cameras + Windows computer + Motive) Drone with or without on-board co-computer, but a co-computer is required to feed the MOCAP data into the flight control unit (FCU)","title":"Components"},{"location":"setup/mocap_setup/#mocap","text":"Calibrate the MOCAP system using the wand supplied with the MOCAP system. Just go wave the wand around with the calibration process started on the MOCAP computer. It will tell you when it's done. Calibrate the ground plane of the MOCAP system using the \"calibration square\", which is in fact not a square but a triangleish shape. Put it in the center of the capture volume, and align its axes. Know that the longer side is the Z axis, and the shorter side is the X axis. One of them will be negated, I forget which. I think it's the X axis. This is nothing to worry about because you can then flip the coordinate system in the ground plane settings, which you will have to anyway. Note that the rotations are accumulative; it's not a setting, but a transformation that you add. So if you rotate 90\u00b0 about X, and then again -- you've actually rotated 180\u00b0 about X in total. Double check the orientation of the FCU in QGroundControl. Just do it. It's under the \"Sensors\" heading. It is important to know that when you create a rigid body in the MOCAP system, the current orientation of that rigid body will be its \"unit orientation\", and so when you inevitably need to align the body frame to the frame of the MOCAP system, do it before creating the body (or recreate it afterwards.) DO NOT trust the axes labels in Motive. They are not indicative of which direction is positive for each dimension. It's a lot easier to do this alignment later, using RViz. Enable the Data Streaming in Motive, found somewhere in the menus. It will send its data to a multicast IP address, and that's great. Don't change it. NOTE that Motive sometimes sets the broadcasting device to \"loopback\", this effectively disables the MOCAP data broadcasting. We don't know why it keeps doing that.","title":"MOCAP"},{"location":"setup/mocap_setup/#ros","text":"So, on the co-computer, install and run mavros , and mavros_extras . Edit the configuration of mavros to include the mocap_pose_estimate plugin. Also install mocap_optitrack and run it. You should be able to see your rigid body in the TF tree (in RViz).","title":"ROS"},{"location":"setup/radio_setup/","text":"Setting up the FrSky D4R-II Radio Receiver We use the FrSky D4R-II Radio Receiver and bind it to the FrSky Taranis X9D Plus digital Telemetry Radio system (our transmitter). Instructions Instructional Video The instructions for setting up the receiver and binding it to the transmitter are based on the instructional video How To Bind FrSky D4R-II Receiver . Note that we will be using PPM mode. Connection Connect signal pins for channels 3 and 4 using jumper to put receiver in PPM mode. Connect the 3 wire servo cable to receiver channel 1 and plug this into the PPM RC port on the Pixhawk 4. Check the status lights on the D4R-II to determine if the receiver is powered on and bound. A blinking red light indicates it is receiving power, but is not bound. Power on the transmitter and, if still red, see binding instructions below. A solid green light indicates power and proper binding. Solid green and red lights indicates firmware incompatibilities between receiver and transmitter. Binding to Transmitter Power on Taranis X9D Plus. [Menu] -> Model -> [PAGE] D8 Mode and CH1-8 Select receiver bind option and press [ENT]. The Taranis should start chirping. Hold down failsafe (F/S) button on D4R-II while applying power by connecting the Pixhawk 4 to USB. Wait until you see a solid green light and a blinking red light ton the D4R-II to release the F/S button. Power off Pixhawk 4 by unplugging from USB. Exit Bind mode on the transmitter and go to the home screen. Power on Pixhawk again and confirm there is only a solid green light on the D4R-II. Calibrate the receiver / transmitter In QGroundControl, just follow the instructions under the Radio tab.","title":"Radio"},{"location":"setup/radio_setup/#setting-up-the-frsky-d4r-ii-radio-receiver","text":"We use the FrSky D4R-II Radio Receiver and bind it to the FrSky Taranis X9D Plus digital Telemetry Radio system (our transmitter).","title":"Setting up the FrSky D4R-II Radio Receiver"},{"location":"setup/radio_setup/#instructions","text":"","title":"Instructions"},{"location":"setup/radio_setup/#instructional-video","text":"The instructions for setting up the receiver and binding it to the transmitter are based on the instructional video How To Bind FrSky D4R-II Receiver . Note that we will be using PPM mode.","title":"Instructional Video"},{"location":"setup/radio_setup/#connection","text":"Connect signal pins for channels 3 and 4 using jumper to put receiver in PPM mode. Connect the 3 wire servo cable to receiver channel 1 and plug this into the PPM RC port on the Pixhawk 4. Check the status lights on the D4R-II to determine if the receiver is powered on and bound. A blinking red light indicates it is receiving power, but is not bound. Power on the transmitter and, if still red, see binding instructions below. A solid green light indicates power and proper binding. Solid green and red lights indicates firmware incompatibilities between receiver and transmitter.","title":"Connection"},{"location":"setup/radio_setup/#binding-to-transmitter","text":"Power on Taranis X9D Plus. [Menu] -> Model -> [PAGE] D8 Mode and CH1-8 Select receiver bind option and press [ENT]. The Taranis should start chirping. Hold down failsafe (F/S) button on D4R-II while applying power by connecting the Pixhawk 4 to USB. Wait until you see a solid green light and a blinking red light ton the D4R-II to release the F/S button. Power off Pixhawk 4 by unplugging from USB. Exit Bind mode on the transmitter and go to the home screen. Power on Pixhawk again and confirm there is only a solid green light on the D4R-II.","title":"Binding to Transmitter"},{"location":"setup/radio_setup/#calibrate-the-receiver-transmitter","text":"In QGroundControl, just follow the instructions under the Radio tab.","title":"Calibrate the receiver / transmitter"}]}